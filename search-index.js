var searchIndex = {};
searchIndex['mio'] = {"items":[[0,"","mio","A fast, low-level IO library for Rust focusing on non-blocking APIs, event\nnotification, and other useful utilities for building high performance IO\napps.",null,null],[8,"Buf","","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",0,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",0,null],[10,"advance","","Advance the internal cursor of the Buf",0,null],[10,"has_remaining","","Returns true if there are any more bytes to consume",0,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[10,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.",0,null],[10,"read_byte","","Read a single byte from the `Buf`",0,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the Buf",1,null],[10,"has_remaining","","Returns true if there are any more bytes to consume",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current Buf position and of\nlength between 0 and `Buf::remaining()`.",1,null],[10,"write_slice","","Read bytes from this Buf into the given slice and advance the cursor by\nthe number of bytes read.",1,null],[10,"write_byte","","Write a single byte to the `MuBuf`",1,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[3,"PollOpt","","",null,null],[3,"Interest","","",null,null],[3,"ReadHint","","",null,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[12,"io_poll_timeout_ms","","",2,null],[12,"notify_capacity","","",2,null],[12,"messages_per_tick","","",2,null],[12,"timer_tick_ms","","",2,null],[12,"timer_wheel_size","","",2,null],[12,"timer_capacity","","",2,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Io","","",null,null],[3,"PipeReader","","",null,null],[3,"PipeWriter","","",null,null],[3,"NonBlock","","",null,null],[3,"Poll","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[4,"NotifyError","","",null,null],[13,"Io","","",3,null],[13,"Full","","",3,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[3,"Slab","","A preallocated chunk of memory for storing objects of the same type.",null,null],[11,"with_capacity","","",4,{"inputs":[{"name":"boundedqueue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",4,{"inputs":[{"name":"boundedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",4,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"queue"}}],[11,"new","","",5,{"inputs":[{"name":"slab"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",5,{"inputs":[{"name":"slab"},{"name":"token"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",5,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"is_empty","","",5,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"remaining","","",5,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"has_remaining","","",5,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"contains","","",5,{"inputs":[{"name":"slab"},{"name":"token"}],"output":{"name":"bool"}}],[11,"get","","",5,{"inputs":[{"name":"slab"},{"name":"token"}],"output":{"name":"option"}}],[11,"get_mut","","",5,{"inputs":[{"name":"slab"},{"name":"token"}],"output":{"name":"option"}}],[11,"insert","","",5,{"inputs":[{"name":"slab"},{"name":"t"}],"output":{"name":"result"}}],[11,"remove","","Releases the given slot",5,{"inputs":[{"name":"slab"},{"name":"token"}],"output":{"name":"option"}}],[11,"iter","","",5,{"inputs":[{"name":"slab"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"slab"}],"output":{"name":"slabmutiter"}}],[11,"index","","",5,{"inputs":[{"name":"slab"},{"name":"token"}],"output":{"name":"t"}}],[11,"index_mut","","",5,{"inputs":[{"name":"slab"},{"name":"token"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"slab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",5,{"inputs":[{"name":"slab"}],"output":null}],[11,"cmp","mio","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"empty","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"level","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"oneshot","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"all","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"is_edge","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"remove","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",6,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"eq","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"none","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"readable","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"writable","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"error","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"hup","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"hinted","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"all","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"is_readable","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"bool"}}],[11,"is_writable","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"bool"}}],[11,"is_error","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"bool"}}],[11,"is_hup","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"bool"}}],[11,"is_hinted","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"bool"}}],[11,"insert","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":null}],[11,"remove","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":null}],[11,"bits","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"usize"}}],[11,"contains","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"bool"}}],[11,"bitor","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"interest"}}],[11,"bitxor","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"interest"}}],[11,"bitand","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"interest"}}],[11,"sub","","",7,{"inputs":[{"name":"interest"},{"name":"interest"}],"output":{"name":"interest"}}],[11,"not","","",7,{"inputs":[{"name":"interest"}],"output":{"name":"interest"}}],[11,"fmt","","",7,{"inputs":[{"name":"interest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"eq","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"none","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"all","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"data","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"hup","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"error","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"is_data","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"bool"}}],[11,"is_hup","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"bool"}}],[11,"is_error","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"bool"}}],[11,"insert","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":null}],[11,"remove","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":null}],[11,"contains","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"bool"}}],[11,"bits","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"usize"}}],[11,"bitor","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"bitxor","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"bitand","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"sub","","",8,{"inputs":[{"name":"readhint"},{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"not","","",8,{"inputs":[{"name":"readhint"}],"output":{"name":"readhint"}}],[11,"fmt","","",8,{"inputs":[{"name":"readhint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"default","","",2,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",9,{"inputs":[{"name":"eventloop"}],"output":{"name":"result"}}],[11,"configured","","",9,{"inputs":[{"name":"eventloop"},{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",9,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",9,{"inputs":[{"name":"eventloop"},{"name":"timeout"},{"name":"u64"}],"output":{"name":"timerresult"}}],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",9,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",9,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"register","","Registers an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"}],"output":{"name":"result"}}],[11,"register_opt","","Registers an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"interest"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"interest"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",9,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",9,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",10,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",10,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"into_ascii_uppercase","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_lowercase","","",11,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_uppercase","collections::vec","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"into_ascii_lowercase","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"next","std::ascii","",13,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"new","std::thunk","",14,{"inputs":[{"name":"thunk"},{"name":"f"}],"output":{"name":"thunk"}}],[11,"with_arg","","",14,{"inputs":[{"name":"thunk"},{"name":"f"}],"output":{"name":"thunk"}}],[11,"invoke","","",14,{"inputs":[{"name":"thunk"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","core::num::wrapping","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",15,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"eq","std::thread::__local","",16,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquire a reference to the value in this TLS key.",17,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",17,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"destroyed","","Deprecated",17,{"inputs":[{"name":"localkey"}],"output":{"name":"bool"}}],[11,"set","std::thread::__scoped","Insert a value into this scoped thread local storage slot for a\nduration of a closure.",18,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Get a value out of this scoped variable.",18,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",18,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread","Generate the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",19,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Name the thread-to-be. Currently the name is used for identification\nonly in panic messages.",19,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Set the size of the stack for the new thread.",19,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"stdout","","Redirect thread-local stdout.",19,{"inputs":[{"name":"builder"},{"name":"box"}],"output":{"name":"builder"}}],[11,"stderr","","Redirect thread-local stderr.",19,{"inputs":[{"name":"builder"},{"name":"box"}],"output":{"name":"builder"}}],[11,"spawn","","Spawn a new thread, and return a join handle for it.",19,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"scoped","","Spawn a new child thread that must be joined within a given\nscope, and return a `JoinGuard`.",19,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"spawn","","Deprecated: use module-level free function.",20,{"inputs":[{"name":"thread"},{"name":"f"}],"output":{"name":"thread"}}],[11,"scoped","","Deprecated: use module-level free function.",20,{"inputs":[{"name":"thread"},{"name":"f"}],"output":{"name":"joinguard"}}],[11,"current","","Deprecated: use module-level free function.",20,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"yield_now","","Deprecated: use module-level free function.",20,null],[11,"panicking","","Deprecated: use module-level free function.",20,{"inputs":[{"name":"thread"}],"output":{"name":"bool"}}],[11,"park","","Deprecated: use module-level free function.",20,null],[11,"park_timeout","","Deprecated: use module-level free function.",20,null],[11,"unpark","","Atomically makes the handle's token available if it is not already.",20,null],[11,"name","","Get the thread's name.",20,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",20,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extract a handle to the underlying thread",21,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Wait for the associated thread to finish.",21,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"drop","","",21,null],[11,"thread","","Extract a handle to the thread this guard will join on.",22,{"inputs":[{"name":"joinguard"}],"output":{"name":"thread"}}],[11,"join","","Wait for the associated thread to finish, returning the result of the thread's\ncalculation.",22,{"inputs":[{"name":"joinguard"}],"output":{"name":"t"}}],[11,"detach","","Detaches the child thread, allowing it to outlive its parent.",22,null],[11,"drop","","",22,null],[11,"eq","std::collections::hash::table","",23,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",23,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",26,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",26,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",26,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",26,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",26,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",26,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",26,null],[11,"next","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",25,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",24,null],[11,"take","","Removes this bucket's key and value from the hashtable.",24,null],[11,"replace","","",24,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",24,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",24,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",24,null],[11,"expect_full","","",27,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",28,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",28,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",29,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",30,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",30,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",32,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"len","","",32,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",33,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"len","","",33,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",34,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"len","","",34,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",35,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",35,null],[11,"clone","","",29,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",29,null],[11,"clone","std::collections::hash::map","",36,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Create an empty HashMap.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",37,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",37,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",37,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",37,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",37,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",37,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",37,null],[11,"get","","Returns a reference to the value corresponding to the key.",37,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",37,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",37,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",37,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",37,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",37,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",37,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",39,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",40,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"len","","",42,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",43,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"len","","",43,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\nReturns a mutable reference to the entry if occupied, or the VacantEntry if vacant",44,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",44,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",44,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",45,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",45,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",45,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",45,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",45,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",46,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",37,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",37,null],[11,"clone","","",47,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",47,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",47,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",47,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",48,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Create an empty HashSet.",48,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",48,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",48,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",48,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",48,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",48,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",48,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",48,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",48,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"difference","","Visit the values representing the difference.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Return the number of elements in the set",48,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements",48,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",48,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",48,null],[11,"contains","","Returns `true` if the set contains a value.",48,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",48,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",48,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",48,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",48,null],[11,"default","","",48,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","",48,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",49,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",49,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"len","","",49,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",50,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"len","","",50,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",51,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"len","","",51,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",52,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",52,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",53,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",54,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",55,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"hasher","std::collections::hash::state","",56,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",56,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",56,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","collections::vec_map","",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",57,null],[11,"hash","","",57,null],[11,"new","","Creates an empty `VecMap`.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",57,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",57,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",57,null],[11,"split_off","","Splits the collection into two at the given key.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Return the number of elements in the map.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",57,null],[11,"get","","Returns a reference to the value corresponding to the key.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",58,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",58,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",58,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",59,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",60,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",60,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",60,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",60,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",60,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",57,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",57,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",57,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",57,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","",57,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",57,null],[11,"index","","",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",57,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",64,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",65,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","collections::linked_list","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"clone","","",69,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",70,null],[11,"iter","","Provides a forward iterator.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",70,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",70,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",70,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",70,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",70,null],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",71,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",70,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",70,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",70,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"clone","collections::vec_deque","",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",72,null],[11,"default","","",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",72,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",72,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",72,null],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",72,null],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",72,null],[11,"iter","","Returns a front-to-back iterator.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by value.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",72,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",72,null],[11,"len","","Returns the number of elements in the `VecDeque`.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",72,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",72,null],[11,"push_back","","Appends an element to the back of a buffer",72,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",72,null],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",72,null],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",72,null],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",73,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",76,null],[11,"next","","",76,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",72,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",72,null],[11,"index","","",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",72,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",72,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","",72,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::binary_heap","",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",77,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",77,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",77,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",77,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",77,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",77,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",77,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",77,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",77,null],[11,"clone","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",77,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",77,null],[11,"drop","std::dynamic_lib","",81,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",81,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",81,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",81,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",81,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",81,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",81,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",82,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next","","",83,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"clone","","",84,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",84,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",84,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"fmt","","",86,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",86,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",87,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"len","","",87,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",88,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"len","","",88,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"hash","std::ffi::c_str","",89,null],[11,"cmp","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",90,null],[11,"fmt","","",91,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"new","","Create a new C-compatible string from a container of bytes.",89,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_slice","","Create a new C-compatible string from a byte slice.",89,null],[11,"from_vec","","Create a C-compatible string from a byte vector.",89,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_vec_unchecked","","Create a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",89,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",89,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",89,null],[11,"deref","","",89,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",89,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::from_vec`.",91,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",91,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",91,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",91,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_error","std::io::error","",92,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from_error","std::old_io","",93,{"inputs":[{"name":"ioerror"},{"name":"nulerror"}],"output":{"name":"ioerror"}}],[11,"from_ptr","std::ffi::c_str","Cast a raw C string to a safe C string wrapper.",90,null],[11,"as_ptr","","Return the inner pointer to this C string.",90,null],[11,"to_bytes","","Convert this C string to a byte slice.",90,null],[11,"to_bytes_with_nul","","Convert this C string to a byte slice containing the trailing 0 byte.",90,null],[11,"eq","","",90,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",90,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"into_bytes","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_bytes","collections::vec","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone","std::ffi::os_str","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_string","","Constructs an `OsString` at no cost by consuming a `String`.",94,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from_str","","Constructs an `OsString` by copying from a `&str` slice.",94,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",94,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"into_string","","Convert the `OsString` into a `String` if it contains valid Unicode data.",94,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push_os_str","","Extend the string with the given `&OsStr` slice.",94,null],[11,"push","","Extend the string with the given `&OsStr` slice.",94,null],[11,"from","","",94,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",94,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",94,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"deref","","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",94,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",94,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",94,null],[11,"from_str","","Coerce directly from a `&str` slice to a `&OsStr` slice.",95,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"osstr"}}],[11,"to_str","","Yield a `&str` slice if the `OsStr` is valid unicode.",95,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Convert an `OsStr` to a `Cow<str>`.",95,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copy the slice into an owned `OsString`.",95,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"eq","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",95,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",95,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_os_str","","",95,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_os_str","","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_os_str","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"as_ref","std::ffi::os_str","",95,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"as_os_str","std::old_path::posix","",96,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"new_in","std::fs::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",97,{"inputs":[{"name":"tempdir"},{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",97,{"inputs":[{"name":"tempdir"},{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",97,{"inputs":[{"name":"tempdir"}],"output":{"name":"pathbuf"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",97,{"inputs":[{"name":"tempdir"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary directory",97,{"inputs":[{"name":"tempdir"}],"output":{"name":"result"}}],[11,"drop","","",97,null],[11,"clone","std::fs","",98,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",99,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"open","","Attempts to open a file in read-only mode.",100,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Open a file in write-only mode.",100,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"path","","Returns the original path that was used to open this file.",100,{"inputs":[{"name":"file"}],"output":{"name":"option"}}],[11,"sync_all","","Attempt to sync all OS-internal metadata to disk.",100,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",100,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",100,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",100,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"read","","",100,null],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",100,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",98,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Set the option for read access.",98,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Set the option for write access.",98,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Set the option for the append mode.",98,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Set the option for truncating a previous file.",98,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Set the option for creating a new file.",98,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Open a file at `path` with the options specified by `self`.",98,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",101,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",101,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",101,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",101,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"accessed","","Returns the most recent access time for a file.",101,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"modified","","Returns the most recent modification time for a file.",101,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",99,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modify the readonly flag for this set of permissions.",99,null],[11,"next","","",102,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",103,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"next","","",104,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",105,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",105,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",105,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",105,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"get","std::io::lazy","",106,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity",107,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity",107,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",107,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",107,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",107,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",107,null],[11,"fill_buf","","",107,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity",109,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity",109,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",109,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying write.",109,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",109,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",109,null],[11,"error","","Returns the error which caused the call to `into_inner` to fail.",108,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",108,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from_error","std::io::error","",92,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",108,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",108,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`",110,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",110,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",110,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",110,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",110,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",111,null],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",112,{"inputs":[{"name":"bufstream"},{"name":"usize"},{"name":"usize"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",112,{"inputs":[{"name":"bufstream"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"get_ref","","Gets a reference to the underlying stream.",112,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream.",112,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",112,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fill_buf","","",112,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"consume","","",112,null],[11,"read","","",112,null],[11,"write","","",112,null],[11,"flush","","",112,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"bufstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",113,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Create a new cursor wrapping the provided underlying I/O object.",113,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consume this cursor, returning the underlying value.",113,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Get a reference to the underlying value in this cursor.",113,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the underlying value in this cursor.",113,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current value of this cursor",113,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the value of this cursor",113,null],[11,"seek","","",113,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",113,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",113,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",113,null],[11,"read","","",113,null],[11,"read","","",113,null],[11,"fill_buf","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",113,null],[11,"fill_buf","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",113,null],[11,"fill_buf","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",113,null],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",92,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",92,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"repr"}],"output":{"name":"repr"}}],[11,"eq","","",114,{"inputs":[{"name":"repr"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"repr"},{"name":"repr"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"custom"}],"output":{"name":"custom"}}],[11,"eq","","",115,{"inputs":[{"name":"custom"},{"name":"custom"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"custom"},{"name":"custom"}],"output":{"name":"bool"}}],[11,"fmt","","",116,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",116,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new custom error from a specified kind/description/detail.",92,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"str"},{"name":"option"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",92,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_os_error","","Creates a new instance of an `Error` from a particular OS error code.",92,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",92,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Return the corresponding `ErrorKind` for this error.",92,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","Returns a short description for this error message",92,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"detail","","Returns a detailed error message for this error (if one is available)",92,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",92,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",92,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"read","alloc::boxed","",117,null],[11,"read_to_end","","",117,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",117,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",117,null],[11,"write_fmt","","",117,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",117,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",117,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",117,null],[11,"read_until","","",117,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",117,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",12,null],[11,"write_all","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"read","std::io::util","",118,null],[11,"fill_buf","","",118,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",118,null],[11,"read","","",119,null],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",121,null],[11,"write","","",122,null],[11,"flush","","",122,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",123,null],[11,"flush","","",123,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"lock","","Lock this handle to the standard input stream, returning a readable\nguard.",124,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",124,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",124,null],[11,"read_to_end","","",124,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",124,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",125,null],[11,"fill_buf","","",125,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",125,null],[11,"lock","","Lock this handle to the standard output stream, returning a writable\nguard.",126,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",126,null],[11,"flush","","",126,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",126,null],[11,"write","","",127,null],[11,"flush","","",127,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Lock this handle to the standard error stream, returning a writable\nguard.",128,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",128,null],[11,"flush","","",128,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",128,null],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",130,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",130,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",131,null],[11,"flush","","",131,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",132,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",133,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",133,null],[11,"fill_buf","","",133,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",133,null],[11,"read","","",134,null],[11,"next","","",135,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"charserror"}],"output":{"name":"charserror"}}],[11,"eq","","",136,{"inputs":[{"name":"charserror"},{"name":"charserror"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"charserror"},{"name":"charserror"}],"output":{"name":"bool"}}],[11,"next","","",137,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",136,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",136,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",138,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",139,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",140,null],[11,"fmt","","",140,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",141,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",141,null],[11,"clone","","",141,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",141,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Create a new IPv4 address from four eight-bit octets.",142,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address",142,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8)",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16)",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Convert this address to an IPv4-compatible IPv6 address",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Convert this address to an IPv4-mapped IPv6 address",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",140,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",142,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",142,null],[11,"partial_cmp","","",142,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",142,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"new","","Create a new IPv6 address from eight 16-bit segments.",143,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",143,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1)",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6)",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10)",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10)",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Convert this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",143,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"partial_cmp","","",143,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",143,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",144,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",144,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",144,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",144,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",145,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Gets the IP address associated with this socket address.",145,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Gets the port number associated with this socket address",145,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",146,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Gets the IP address associated with this socket address.",146,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Gets the port number associated with this socket address",146,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Gets scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",146,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Gets scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",146,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",144,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",146,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",145,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",145,null],[11,"hash","","",146,null],[11,"to_socket_addrs","","",144,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",145,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",146,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Open a TCP connection to a remote host.",147,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",147,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","Returns the socket address of the local half of this TCP connection.",147,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",147,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",147,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",147,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",147,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",147,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read","","",147,null],[11,"write","","",147,null],[11,"flush","","",147,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",148,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",148,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"socket_addr","","Deprecated, renamed to local_addr",148,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",148,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",148,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",148,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",149,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",150,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",150,null],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",150,null],[11,"socket_addr","","Returns the socket address that this socket was created from.",150,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",150,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",150,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the broadcast flag on or off",150,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",150,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",150,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",150,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","Sets the multicast TTL",150,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_time_to_live","","Sets this socket's TTL",150,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",140,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",142,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",143,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",144,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",151,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",151,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","std::net","",152,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",153,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"fmt","std::old_io::buffered","",154,{"inputs":[{"name":"bufferedreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacity","","Creates a new `BufferedReader` with the specified buffer capacity",154,{"inputs":[{"name":"bufferedreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufferedreader"}}],[11,"new","","Creates a new `BufferedReader` with a default buffer capacity",154,{"inputs":[{"name":"bufferedreader"},{"name":"r"}],"output":{"name":"bufferedreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",154,{"inputs":[{"name":"bufferedreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",154,{"inputs":[{"name":"bufferedreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufferedReader`, returning the underlying reader.",154,{"inputs":[{"name":"bufferedreader"}],"output":{"name":"r"}}],[11,"fill_buf","","",154,{"inputs":[{"name":"bufferedreader"}],"output":{"name":"result"}}],[11,"consume","","",154,null],[11,"read","","",154,null],[11,"fmt","","",155,{"inputs":[{"name":"bufferedwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",155,{"inputs":[{"name":"bufferedwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufferedwriter"}}],[11,"new","","Creates a new `BufferedWriter` with a default buffer capacity",155,{"inputs":[{"name":"bufferedwriter"},{"name":"w"}],"output":{"name":"bufferedwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",155,{"inputs":[{"name":"bufferedwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying write.",155,{"inputs":[{"name":"bufferedwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufferedWriter`, returning the underlying writer.",155,{"inputs":[{"name":"bufferedwriter"}],"output":{"name":"w"}}],[11,"write_all","","",155,null],[11,"flush","","",155,{"inputs":[{"name":"bufferedwriter"}],"output":{"name":"result"}}],[11,"drop","","",155,null],[11,"fmt","","",156,{"inputs":[{"name":"linebufferedwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineBufferedWriter`",156,{"inputs":[{"name":"linebufferedwriter"},{"name":"w"}],"output":{"name":"linebufferedwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",156,{"inputs":[{"name":"linebufferedwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",156,{"inputs":[{"name":"linebufferedwriter"}],"output":{"name":"w"}}],[11,"write_all","","",156,null],[11,"flush","","",156,{"inputs":[{"name":"linebufferedwriter"}],"output":{"name":"result"}}],[11,"read","","",157,null],[11,"fmt","","",158,{"inputs":[{"name":"bufferedstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",158,{"inputs":[{"name":"bufferedstream"},{"name":"usize"},{"name":"usize"},{"name":"s"}],"output":{"name":"bufferedstream"}}],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",158,{"inputs":[{"name":"bufferedstream"},{"name":"s"}],"output":{"name":"bufferedstream"}}],[11,"get_ref","","Gets a reference to the underlying stream.",158,{"inputs":[{"name":"bufferedstream"}],"output":{"name":"s"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream.",158,{"inputs":[{"name":"bufferedstream"}],"output":{"name":"s"}}],[11,"into_inner","","Unwraps this `BufferedStream`, returning the underlying stream.",158,{"inputs":[{"name":"bufferedstream"}],"output":{"name":"s"}}],[11,"fill_buf","","",158,{"inputs":[{"name":"bufferedstream"}],"output":{"name":"result"}}],[11,"consume","","",158,null],[11,"read","","",158,null],[11,"write_all","","",158,null],[11,"flush","","",158,{"inputs":[{"name":"bufferedstream"}],"output":{"name":"result"}}],[11,"new","std::old_io::comm_adapters","Wraps a `Port` in a `ChanReader` structure",159,{"inputs":[{"name":"chanreader"},{"name":"receiver"}],"output":{"name":"chanreader"}}],[11,"fill_buf","","",159,{"inputs":[{"name":"chanreader"}],"output":{"name":"result"}}],[11,"consume","","",159,null],[11,"read","","",159,null],[11,"new","","Wraps a channel in a `ChanWriter` structure",160,{"inputs":[{"name":"chanwriter"},{"name":"sender"}],"output":{"name":"chanwriter"}}],[11,"clone","","",160,{"inputs":[{"name":"chanwriter"}],"output":{"name":"chanwriter"}}],[11,"write_all","","",160,null],[11,"write_all","collections::vec","",12,null],[11,"clone","std::old_io::mem","",161,{"inputs":[{"name":"memwriter"}],"output":{"name":"memwriter"}}],[11,"new","","Create a new `MemWriter`.",161,{"inputs":[{"name":"memwriter"}],"output":{"name":"memwriter"}}],[11,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",161,{"inputs":[{"name":"memwriter"},{"name":"usize"}],"output":{"name":"memwriter"}}],[11,"from_vec","","Create a new `MemWriter` that will append to an existing `Vec`.",161,{"inputs":[{"name":"memwriter"},{"name":"vec"}],"output":{"name":"memwriter"}}],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",161,null],[11,"into_inner","","Unwraps this `MemWriter`, returning the underlying buffer",161,{"inputs":[{"name":"memwriter"}],"output":{"name":"vec"}}],[11,"write_all","","",161,null],[11,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",162,{"inputs":[{"name":"memreader"},{"name":"vec"}],"output":{"name":"memreader"}}],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",162,{"inputs":[{"name":"memreader"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",162,null],[11,"into_inner","","Unwraps this `MemReader`, returning the underlying buffer",162,{"inputs":[{"name":"memreader"}],"output":{"name":"vec"}}],[11,"read","","",162,null],[11,"tell","","",162,{"inputs":[{"name":"memreader"}],"output":{"name":"result"}}],[11,"seek","","",162,{"inputs":[{"name":"memreader"},{"name":"i64"},{"name":"seekstyle"}],"output":{"name":"result"}}],[11,"fill_buf","","",162,{"inputs":[{"name":"memreader"}],"output":{"name":"result"}}],[11,"consume","","",162,null],[11,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",163,null],[11,"write_all","","",163,null],[11,"tell","","",163,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"seek","","",163,{"inputs":[{"name":"bufwriter"},{"name":"i64"},{"name":"seekstyle"}],"output":{"name":"result"}}],[11,"new","","Creates a new buffered reader which will read the specified buffer",164,null],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",164,{"inputs":[{"name":"bufreader"}],"output":{"name":"bool"}}],[11,"read","","",164,null],[11,"tell","","",164,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"seek","","",164,{"inputs":[{"name":"bufreader"},{"name":"i64"},{"name":"seekstyle"}],"output":{"name":"result"}}],[11,"fill_buf","","",164,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",164,null],[11,"write_all","core::result","",165,null],[11,"flush","","",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"read","","",165,null],[11,"tell","","",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"seek","","",165,{"inputs":[{"name":"result"},{"name":"i64"},{"name":"seekstyle"}],"output":{"name":"result"}}],[11,"listen","","",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"accept","","",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"new_in","std::old_io::tempfile","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",166,{"inputs":[{"name":"tempdir"},{"name":"path"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",166,{"inputs":[{"name":"tempdir"},{"name":"str"}],"output":{"name":"result"}}],[11,"into_inner","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",166,{"inputs":[{"name":"tempdir"}],"output":{"name":"path"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",166,{"inputs":[{"name":"tempdir"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary directory",166,{"inputs":[{"name":"tempdir"}],"output":{"name":"result"}}],[11,"drop","","",166,null],[11,"new","std::old_io::extensions","Constructs a new byte iterator from the given Reader instance.",167,{"inputs":[{"name":"bytes"},{"name":"r"}],"output":{"name":"bytes"}}],[11,"next","","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"open_mode","std::old_io::fs","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",168,{"inputs":[{"name":"file"},{"name":"path"},{"name":"filemode"},{"name":"fileaccess"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",168,{"inputs":[{"name":"file"},{"name":"path"}],"output":{"name":"result"}}],[11,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",168,{"inputs":[{"name":"file"},{"name":"path"}],"output":{"name":"result"}}],[11,"path","","Returns the original path that was used to open this file.",168,{"inputs":[{"name":"file"}],"output":{"name":"path"}}],[11,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",168,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use cases that\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",168,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",168,{"inputs":[{"name":"file"},{"name":"i64"}],"output":{"name":"result"}}],[11,"eof","","Returns true if the stream has reached the end of the file.",168,{"inputs":[{"name":"file"}],"output":{"name":"bool"}}],[11,"stat","","Queries information about the underlying file.",168,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"directories"}],"output":{"name":"directories"}}],[11,"next","","",169,{"inputs":[{"name":"directories"}],"output":{"name":"option"}}],[11,"read","","",168,null],[11,"write_all","","",168,null],[11,"tell","","",168,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",168,{"inputs":[{"name":"file"},{"name":"i64"},{"name":"seekstyle"}],"output":{"name":"result"}}],[11,"stat","std::old_path::posix","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"lstat","","",96,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"fmt","std::old_io::net::addrinfo","",170,{"inputs":[{"name":"sockettype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"flag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"hint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"info"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","std::old_io::net::tcp","Open a TCP connection to a remote host.",175,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",175,{"inputs":[{"name":"tcpstream"},{"name":"a"},{"name":"duration"}],"output":{"name":"result"}}],[11,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",175,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_name","","Returns the socket address of the local half of this TCP connection.",175,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",175,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",175,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_read","","Closes the reading half of this connection.",175,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"close_write","","Closes the writing half of this connection.",175,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",175,null],[11,"set_read_timeout","","Sets the timeout for read operations on this stream.",175,null],[11,"set_write_timeout","","Sets the timeout for write operations on this stream.",175,null],[11,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",175,{"inputs":[{"name":"tcpstream"}],"output":{"name":"tcpstream"}}],[11,"read","","",175,null],[11,"write_all","","",175,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.\nThis listener is not ready for accepting connections, `listen` must be called\non it before that's possible.",176,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"socket_name","","Returns the local socket address of this listener.",176,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"listen","","",176,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",177,null],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",177,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"result"}}],[11,"accept","","",177,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"result"}}],[11,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",177,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"tcpacceptor"}}],[11,"bind","std::old_io::net::udp","Creates a UDP socket from the given address.",178,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",178,null],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",178,null],[11,"socket_name","","Returns the socket address that this socket was created from.",178,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",178,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",178,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",178,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_ttl","","Sets the multicast TTL",178,{"inputs":[{"name":"udpsocket"},{"name":"isize"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets this socket's TTL",178,{"inputs":[{"name":"udpsocket"},{"name":"isize"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the broadcast flag on or off",178,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_timeout","","Sets the read/write timeout for this socket.",178,null],[11,"set_read_timeout","","Sets the read timeout for this socket.",178,null],[11,"set_write_timeout","","Sets the write timeout for this socket.",178,null],[11,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",178,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"fmt","std::old_io::net::ip","",179,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",179,null],[11,"clone","","",179,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"eq","","",179,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",180,null],[11,"clone","","",180,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"eq","","",180,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",179,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",180,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",181,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addr","","",180,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect","std::old_io::net::pipe","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",182,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",182,{"inputs":[{"name":"unixstream"},{"name":"p"},{"name":"duration"}],"output":{"name":"result"}}],[11,"close_read","","Closes the reading half of this connection.",182,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"close_write","","Closes the writing half of this connection.",182,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"set_timeout","","Sets the read/write timeout for this socket.",182,null],[11,"set_read_timeout","","Sets the read timeout for this socket.",182,null],[11,"set_write_timeout","","Sets the write timeout for this socket.",182,null],[11,"clone","","",182,{"inputs":[{"name":"unixstream"}],"output":{"name":"unixstream"}}],[11,"read","","",182,null],[11,"write_all","","",182,null],[11,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",183,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","",183,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",184,null],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",184,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"result"}}],[11,"accept","","",184,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"result"}}],[11,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",184,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"unixacceptor"}}],[11,"open","std::old_io::pipe","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",185,{"inputs":[{"name":"pipestream"},{"name":"i32"}],"output":{"name":"result"}}],[11,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",185,{"inputs":[{"name":"pipestream"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"pipestream"}],"output":{"name":"pipestream"}}],[11,"read","","",185,null],[11,"write_all","","",185,null],[11,"fmt","std::old_io::process","",186,{"inputs":[{"name":"envkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"envkey"}],"output":{"name":"envkey"}}],[11,"eq","","",186,{"inputs":[{"name":"envkey"},{"name":"envkey"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"envkey"},{"name":"envkey"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"container_as_bytes","","",186,null],[11,"clone","","",187,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",187,{"inputs":[{"name":"command"},{"name":"t"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",187,{"inputs":[{"name":"command"},{"name":"t"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",187,null],[11,"env","","Inserts or updates an environment variable mapping.",187,{"inputs":[{"name":"command"},{"name":"t"},{"name":"u"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",187,{"inputs":[{"name":"command"},{"name":"t"}],"output":{"name":"command"}}],[11,"env_set_all","","Sets the entire environment map for the child process.",187,null],[11,"cwd","","Set the working directory for the child process.",187,{"inputs":[{"name":"command"},{"name":"path"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",187,{"inputs":[{"name":"command"},{"name":"stdiocontainer"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",187,{"inputs":[{"name":"command"},{"name":"stdiocontainer"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",187,{"inputs":[{"name":"command"},{"name":"stdiocontainer"}],"output":{"name":"command"}}],[11,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",187,{"inputs":[{"name":"command"},{"name":"usize"}],"output":{"name":"command"}}],[11,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",187,{"inputs":[{"name":"command"},{"name":"usize"}],"output":{"name":"command"}}],[11,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",187,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, which is returned.",187,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",187,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",187,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",187,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"processoutput"}],"output":{"name":"processoutput"}}],[11,"eq","","",188,{"inputs":[{"name":"processoutput"},{"name":"processoutput"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"processoutput"},{"name":"processoutput"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"stdiocontainer"}],"output":{"name":"stdiocontainer"}}],[11,"fmt","","",190,{"inputs":[{"name":"processexit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"processexit"}],"output":{"name":"processexit"}}],[11,"eq","","",190,{"inputs":[{"name":"processexit"},{"name":"processexit"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"processexit"},{"name":"processexit"}],"output":{"name":"bool"}}],[11,"fmt","","Format a ProcessExit enum, to nicely present the information.",190,{"inputs":[{"name":"processexit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",190,{"inputs":[{"name":"processexit"}],"output":{"name":"bool"}}],[11,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",190,{"inputs":[{"name":"processexit"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"kill","","Sends `signal` to another process in the system identified by `id`.",191,{"inputs":[{"name":"process"},{"name":"i32"},{"name":"isize"}],"output":{"name":"result"}}],[11,"id","","Returns the process id of this child process",191,{"inputs":[{"name":"process"}],"output":{"name":"i32"}}],[11,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",191,{"inputs":[{"name":"process"},{"name":"isize"}],"output":{"name":"result"}}],[11,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",191,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",191,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",191,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",191,null],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",191,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"forget","","Forgets this process, allowing it to outlive the parent",191,null],[11,"drop","","",191,null],[11,"clone","std::old_io::stdio","",192,{"inputs":[{"name":"stdinreader"}],"output":{"name":"stdinreader"}}],[11,"deref","","",193,{"inputs":[{"name":"stdinreaderguard"}],"output":{"name":"bufferedreader"}}],[11,"deref_mut","","",193,{"inputs":[{"name":"stdinreaderguard"}],"output":{"name":"bufferedreader"}}],[11,"lock","","Locks the `StdinReader`, granting the calling thread exclusive access\nto the underlying `BufferedReader`.",192,{"inputs":[{"name":"stdinreader"}],"output":{"name":"stdinreaderguard"}}],[11,"read_line","","Like `Buffer::read_line`.",192,{"inputs":[{"name":"stdinreader"}],"output":{"name":"result"}}],[11,"read_until","","Like `Buffer::read_until`.",192,{"inputs":[{"name":"stdinreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_char","","Like `Buffer::read_char`.",192,{"inputs":[{"name":"stdinreader"}],"output":{"name":"result"}}],[11,"read","","",192,null],[11,"read_at_least","","",192,null],[11,"push_at_least","","",192,{"inputs":[{"name":"stdinreader"},{"name":"usize"},{"name":"usize"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_end","","",192,{"inputs":[{"name":"stdinreader"}],"output":{"name":"result"}}],[11,"read_le_uint_n","","",192,{"inputs":[{"name":"stdinreader"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_be_uint_n","","",192,{"inputs":[{"name":"stdinreader"},{"name":"usize"}],"output":{"name":"result"}}],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",194,{"inputs":[{"name":"stdreader"}],"output":{"name":"bool"}}],[11,"read","","",194,null],[11,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",195,{"inputs":[{"name":"stdwriter"}],"output":{"name":"result"}}],[11,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",195,{"inputs":[{"name":"stdwriter"},{"name":"bool"}],"output":{"name":"result"}}],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",195,{"inputs":[{"name":"stdwriter"}],"output":{"name":"bool"}}],[11,"write_all","","",195,null],[11,"new","std::old_io::timer","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",196,{"inputs":[{"name":"timer"}],"output":{"name":"result"}}],[11,"sleep","","Blocks the current task for the specified duration.",196,null],[11,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",196,{"inputs":[{"name":"timer"},{"name":"duration"}],"output":{"name":"receiver"}}],[11,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",196,{"inputs":[{"name":"timer"},{"name":"duration"}],"output":{"name":"receiver"}}],[11,"call","","",197,null],[11,"fmt","std::old_io::util","",198,{"inputs":[{"name":"limitreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LimitReader`",198,{"inputs":[{"name":"limitreader"},{"name":"r"},{"name":"usize"}],"output":{"name":"limitreader"}}],[11,"into_inner","","Consumes the `LimitReader`, returning the underlying `Reader`.",198,{"inputs":[{"name":"limitreader"}],"output":{"name":"r"}}],[11,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",198,{"inputs":[{"name":"limitreader"}],"output":{"name":"usize"}}],[11,"read","","",198,null],[11,"fill_buf","","",198,{"inputs":[{"name":"limitreader"}],"output":{"name":"result"}}],[11,"consume","","",198,null],[11,"fmt","","",199,{"inputs":[{"name":"nullwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_all","","",199,null],[11,"fmt","","",200,{"inputs":[{"name":"zeroreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",200,null],[11,"fill_buf","","",200,{"inputs":[{"name":"zeroreader"}],"output":{"name":"result"}}],[11,"consume","","",200,null],[11,"fmt","","",201,{"inputs":[{"name":"nullreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",201,null],[11,"fill_buf","","",201,{"inputs":[{"name":"nullreader"}],"output":{"name":"result"}}],[11,"consume","","",201,null],[11,"fmt","","",202,{"inputs":[{"name":"multiwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `MultiWriter`",202,{"inputs":[{"name":"multiwriter"},{"name":"vec"}],"output":{"name":"multiwriter"}}],[11,"write_all","","",202,null],[11,"flush","","",202,{"inputs":[{"name":"multiwriter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"chainedreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"chainedreader"}],"output":{"name":"chainedreader"}}],[11,"new","","Creates a new `ChainedReader`",203,{"inputs":[{"name":"chainedreader"},{"name":"i"}],"output":{"name":"chainedreader"}}],[11,"read","","",203,null],[11,"fmt","","",204,{"inputs":[{"name":"teereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `TeeReader`",204,{"inputs":[{"name":"teereader"},{"name":"r"},{"name":"w"}],"output":{"name":"teereader"}}],[11,"into_inner","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",204,null],[11,"read","","",204,null],[11,"fmt","","",205,{"inputs":[{"name":"iterreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",205,{"inputs":[{"name":"iterreader"}],"output":{"name":"iterreader"}}],[11,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",205,{"inputs":[{"name":"iterreader"},{"name":"t"}],"output":{"name":"iterreader"}}],[11,"read","","",205,null],[11,"fmt","std::old_io","",93,{"inputs":[{"name":"ioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"ioerror"}],"output":{"name":"ioerror"}}],[11,"eq","","",93,{"inputs":[{"name":"ioerror"},{"name":"ioerror"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"ioerror"},{"name":"ioerror"}],"output":{"name":"bool"}}],[11,"from_errno","","Convert an `errno` value into an `IoError`.",93,{"inputs":[{"name":"ioerror"},{"name":"i32"},{"name":"bool"}],"output":{"name":"ioerror"}}],[11,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",93,{"inputs":[{"name":"ioerror"}],"output":{"name":"ioerror"}}],[11,"fmt","","",93,{"inputs":[{"name":"ioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",93,{"inputs":[{"name":"ioerror"}],"output":{"name":"str"}}],[11,"fmt","","",206,{"inputs":[{"name":"ioerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",206,{"inputs":[{"name":"ioerrorkind"}],"output":{"name":"ioerrorkind"}}],[11,"eq","","",206,{"inputs":[{"name":"ioerrorkind"},{"name":"ioerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"ioerrorkind"},{"name":"ioerrorkind"}],"output":{"name":"bool"}}],[11,"update_err","core::result","",165,{"inputs":[{"name":"result"},{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"update_detail","","",165,{"inputs":[{"name":"result"},{"name":"d"}],"output":{"name":"result"}}],[11,"update_desc","","",165,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"result"}}],[11,"read","alloc::boxed","",117,null],[11,"read","std::old_io","",207,null],[11,"fill_buf","","",207,{"inputs":[{"name":"refreader"}],"output":{"name":"result"}}],[11,"consume","","",207,null],[11,"write_all","alloc::boxed","",117,null],[11,"flush","","",117,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","std::old_io","",208,null],[11,"flush","","",208,{"inputs":[{"name":"refwriter"}],"output":{"name":"result"}}],[11,"next","","",209,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",210,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",211,{"inputs":[{"name":"incomingconnections"}],"output":{"name":"option"}}],[11,"fmt","","",212,{"inputs":[{"name":"filemode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",212,{"inputs":[{"name":"filemode"},{"name":"filemode"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"filemode"},{"name":"filemode"}],"output":{"name":"bool"}}],[11,"clone","","",212,{"inputs":[{"name":"filemode"}],"output":{"name":"filemode"}}],[11,"fmt","","",213,{"inputs":[{"name":"fileaccess"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",213,{"inputs":[{"name":"fileaccess"},{"name":"fileaccess"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"fileaccess"},{"name":"fileaccess"}],"output":{"name":"bool"}}],[11,"clone","","",213,{"inputs":[{"name":"fileaccess"}],"output":{"name":"fileaccess"}}],[11,"clone","","",214,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"hash","","",214,null],[11,"fmt","","",214,{"inputs":[{"name":"filetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",214,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"hash","","",215,null],[11,"hash","","",216,null],[11,"hash","","",217,null],[11,"cmp","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"option"}}],[11,"lt","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"le","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"gt","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"ge","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"clone","","",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"eq","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"fmt","","",217,{"inputs":[{"name":"filepermission"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"all","","Returns the set containing all flags.",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"bits","","Returns the raw value of the flags currently stored.",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",217,{"inputs":[{"name":"filepermission"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",217,{"inputs":[{"name":"filepermission"},{"name":"u32"}],"output":{"name":"filepermission"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",217,null],[11,"remove","","Removes the specified flags in-place.",217,null],[11,"toggle","","Toggles the specified flags in-place.",217,null],[11,"bitor","","Returns the union of the two sets of flags.",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"sub","","Returns the set difference of the two sets of flags.",217,{"inputs":[{"name":"filepermission"},{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"not","","Returns the complement of this set of flags.",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"default","","",217,{"inputs":[{"name":"filepermission"}],"output":{"name":"filepermission"}}],[11,"fmt","","",217,{"inputs":[{"name":"filepermission"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","std::old_path::posix","",96,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"fmt","","",96,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"from_str","","",96,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"parsepatherror"},{"name":"parsepatherror"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"parsepatherror"},{"name":"parsepatherror"}],"output":{"name":"bool"}}],[11,"clone","","",218,{"inputs":[{"name":"parsepatherror"}],"output":{"name":"parsepatherror"}}],[11,"fmt","","",218,{"inputs":[{"name":"parsepatherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"container_as_bytes","","",96,null],[11,"new_unchecked","","",96,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[11,"set_filename_unchecked","","",96,null],[11,"push_unchecked","","",96,null],[11,"as_vec","","",96,null],[11,"into_vec","","",96,{"inputs":[{"name":"path"}],"output":{"name":"vec"}}],[11,"dirname","","",96,null],[11,"filename","","",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"pop","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"root_path","","",96,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"is_absolute","","",96,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_ancestor_of","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"path_relative_from","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"ends_with_path","","",96,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"new","","Returns a new Path from a byte vector or string",96,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[11,"new_opt","","Returns a new Path from a byte vector or string, if possible",96,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"option"}}],[11,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",96,{"inputs":[{"name":"path"}],"output":{"name":"split"}}],[11,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",96,{"inputs":[{"name":"path"}],"output":{"name":"map"}}],[11,"clone","std::old_path::windows","",219,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"fmt","","",219,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",219,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",219,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",219,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"from_str","","",219,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"parsepatherror"},{"name":"parsepatherror"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"parsepatherror"},{"name":"parsepatherror"}],"output":{"name":"bool"}}],[11,"clone","","",220,{"inputs":[{"name":"parsepatherror"}],"output":{"name":"parsepatherror"}}],[11,"fmt","","",220,{"inputs":[{"name":"parsepatherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",219,null],[11,"container_as_bytes","","",219,null],[11,"container_as_str","","",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"is_str","","",219,{"inputs":[{"name":"path"},{"name":"option"}],"output":{"name":"bool"}}],[11,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",219,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[11,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",219,null],[11,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",219,null],[11,"new_opt","","",219,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"option"}}],[11,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"as_vec","","",219,null],[11,"into_vec","","",219,{"inputs":[{"name":"path"}],"output":{"name":"vec"}}],[11,"dirname","","",219,null],[11,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"filename","","",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension_str","","",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"dir_path","","",219,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"pop","","",219,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"root_path","","",219,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"is_absolute","","See `GenericPath::is_absolute` for info.",219,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","",219,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_ancestor_of","","",219,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"path_relative_from","","",219,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"ends_with_path","","",219,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"new","","Returns a new `Path` from a `BytesContainer`.",219,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[11,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",219,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"option"}}],[11,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",219,{"inputs":[{"name":"path"}],"output":{"name":"map"}}],[11,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",219,{"inputs":[{"name":"path"}],"output":{"name":"map"}}],[11,"fmt","","",221,{"inputs":[{"name":"pathprefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",221,{"inputs":[{"name":"pathprefix"}],"output":{"name":"pathprefix"}}],[11,"eq","","",221,{"inputs":[{"name":"pathprefix"},{"name":"pathprefix"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"pathprefix"},{"name":"pathprefix"}],"output":{"name":"bool"}}],[11,"fmt","std::old_path","",222,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_cow","","Returns the path as a possibly-owned string.",222,{"inputs":[{"name":"display"}],"output":{"name":"cow"}}],[11,"container_as_bytes","collections::string","",11,null],[11,"container_as_str","","",11,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"is_str","","",11,{"inputs":[{"name":"string"},{"name":"option"}],"output":{"name":"bool"}}],[11,"container_as_bytes","collections::vec","",12,null],[11,"container_as_bytes","std::ffi::c_str","",89,null],[11,"fmt","std::os","",223,{"inputs":[{"name":"maperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"maperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",223,{"inputs":[{"name":"maperror"}],"output":{"name":"str"}}],[11,"new","","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",224,null],[11,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",224,{"inputs":[{"name":"memorymap"}],"output":{"name":"usize"}}],[11,"drop","","Unmap the mapping. Panics the task if `munmap` panics.",224,null],[11,"data","","Returns the pointer to the memory created or modified by this map.",224,null],[11,"len","","Returns the number of bytes this map applies to.",224,{"inputs":[{"name":"memorymap"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of mapping this represents.",224,{"inputs":[{"name":"memorymap"}],"output":{"name":"memorymapkind"}}],[11,"as_raw_fd","std::old_io::fs","",168,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::fs","",100,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::old_io::pipe","",185,{"inputs":[{"name":"pipestream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::old_io::net::pipe","",182,{"inputs":[{"name":"unixstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",183,{"inputs":[{"name":"unixlistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",184,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::old_io::net::tcp","",175,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",176,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",177,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::old_io::net::udp","",178,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",147,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",148,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",150,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",94,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",95,null],[11,"as_bytes","","",95,null],[11,"to_cstring","","",95,{"inputs":[{"name":"osstr"}],"output":{"name":"result"}}],[11,"mode","std::fs","",99,{"inputs":[{"name":"permissions"}],"output":{"name":"i32"}}],[11,"set_mode","","",99,null],[11,"mode","","",98,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"uid","std::process","",225,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",225,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"signal","","",226,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"eq","std::path","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",227,null],[11,"fmt","","",227,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",227,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determine if the prefix is verbatim, i.e. begins `\\\\?\\`.",227,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",228,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",228,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",229,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",229,null],[11,"clone","","",229,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",229,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",229,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",229,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",229,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",229,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",230,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",230,null],[11,"cmp","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extract the underlying `OsStr` slice",230,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",230,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",231,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extract a slice corresponding to the portion of the path remaining for iteration.",231,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",231,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",231,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",231,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extract a slice corresponding to the portion of the path remaining for iteration.",232,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",231,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",231,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",231,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",231,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",233,null],[11,"clone","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocate an empty `PathBuf`.",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"push","","Extend `self` with `path`.",233,null],[11,"pop","","Truncate `self` to `self.parent()`.",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",233,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",233,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consume the `PathBuf`, yielding its internal `OsString` storage",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",233,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",233,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",233,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",233,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",233,null],[11,"fmt","","",233,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",105,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",233,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",233,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"as_os_str","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",105,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",105,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yield the underlying `OsStr` slice.",105,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yield a `&str` slice if the `Path` is valid unicode.",105,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Convert a `Path` to a `Cow<str>`.",105,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Convert a `Path` to an owned `PathBuf`.",105,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",105,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",105,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",105,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",105,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",105,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",105,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",105,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",105,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",105,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extract the stem (non-extension) portion of `self.file()`.",105,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extract the extension of `self.file()`, if possible.",105,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",105,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",105,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",105,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",105,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",105,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",105,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"as_ref","","",105,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"as_os_str","","",105,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",105,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",234,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",105,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",105,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",95,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",94,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",233,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",235,null],[11,"flush","","",235,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",236,null],[11,"read","","",237,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",225,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",225,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",225,null],[11,"env","","Inserts or updates an environment variable mapping.",225,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",225,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",225,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Set the working directory for the child process.",225,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",225,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",225,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",225,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",225,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",225,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",225,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",225,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",238,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"clone","","",239,{"inputs":[{"name":"stdioimp"}],"output":{"name":"stdioimp"}}],[11,"capture","","A new pipe should be arranged to connect the parent and child processes.",240,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",240,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",240,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",240,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",226,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",226,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",226,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",226,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Return the exit code of the process, if any.",226,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",226,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",241,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",241,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",241,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",242,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",242,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",242,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",242,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Reader`.",243,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",243,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",243,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",243,null],[11,"clone","std::rand","",244,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",244,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",244,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",244,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",244,null],[11,"from_seed","","",244,null],[11,"reseed","","",245,null],[11,"clone","","",246,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",246,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",246,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",246,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",247,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",247,null],[11,"next_u32","","",247,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",247,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",247,null],[11,"reseed","","",247,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",247,null],[11,"reseed","","",248,null],[11,"default","","",248,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",249,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",249,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",249,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",250,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",250,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",251,{"inputs":[{"name":"gammasmallshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",252,{"inputs":[{"name":"gammalargeshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",250,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",251,{"inputs":[{"name":"gammasmallshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",252,{"inputs":[{"name":"gammalargeshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",253,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",253,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",253,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",254,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",254,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",254,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",255,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",255,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",255,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"rand","rand::distributions::normal","",256,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",257,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",257,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",257,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",258,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",258,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",258,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"rand","rand::distributions::exponential","",259,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",260,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",260,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",260,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","rand::distributions","",261,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"sample","","",261,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",261,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","Create a new `WeightedChoice`.",262,null],[11,"sample","","",262,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",262,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"clone","std::sync::mpsc::blocking","",263,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",263,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",263,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",263,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",264,null],[11,"new","std::sync::mpsc::oneshot","",265,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",265,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",265,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",265,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",265,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",265,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",265,null],[11,"drop_port","","",265,null],[11,"can_recv","","",265,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",265,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",265,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",265,null],[11,"eq","std::sync::mpsc::select","",266,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",267,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",267,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",267,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieve the id of this handle.",268,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",268,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",268,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",268,null],[11,"drop","","",267,null],[11,"drop","","",268,null],[11,"next","","",269,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",270,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",270,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",270,null],[11,"send","","",270,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",270,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",270,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",270,null],[11,"drop_chan","","",270,null],[11,"drop_port","","",270,null],[11,"can_recv","","",270,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",270,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",270,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",270,null],[11,"new","std::sync::mpsc::stream","",271,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",271,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",271,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",271,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",271,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",271,null],[11,"drop_port","","",271,null],[11,"can_recv","","",271,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",271,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",271,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",271,null],[11,"fmt","std::sync::mpsc::sync","",272,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",273,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",273,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",273,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",273,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",273,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",273,null],[11,"drop_chan","","",273,null],[11,"drop_port","","",273,null],[11,"can_recv","","",273,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",273,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",273,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",273,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",274,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",274,null],[11,"pop","","Pops some data from this queue.",274,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",274,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",275,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",275,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",275,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",275,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",275,null],[11,"clone","std::sync::mpsc","",276,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",276,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",276,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",277,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",277,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",277,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",278,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",278,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",278,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",278,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",279,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",279,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",279,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",280,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",280,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",280,null],[11,"send","","Sends a value on this synchronous channel.",281,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",281,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",281,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",281,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",282,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempt to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",282,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",282,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",283,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"drop","","",282,null],[11,"fmt","","",276,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",276,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",276,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",276,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",279,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",279,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",279,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",279,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",277,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",277,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",277,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",278,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",278,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",278,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Create a new barrier that can block a given number of threads.",284,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Block the current thread until all threads has rendezvoused here.",284,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Return whether this thread from `wait` is the \"leader thread\".",285,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"new","std::sync::condvar","Creates a new condition variable which is ready to be waited on and\nnotified.",286,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",286,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",286,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",286,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wake up one blocked thread on this condvar.",286,null],[11,"notify_all","","Wake up all blocked threads on this condvar.",286,null],[11,"drop","","",286,null],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",287,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",287,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",287,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wake up one blocked thread on this condvar.",287,null],[11,"notify_all","","Wake up all blocked threads on this condvar.",287,null],[11,"destroy","","Deallocate all resources associated with this static condvar.",287,null],[11,"get","std::sync::future","Get the value of the future.",288,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"into_inner","","Gets the value from this future, forcing evaluation.",288,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",288,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"from_value","","Create a future from a value.",288,{"inputs":[{"name":"future"},{"name":"a"}],"output":{"name":"future"}}],[11,"from_fn","","Create a future from a function.",288,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"from_receiver","","Create a future from a port",288,{"inputs":[{"name":"future"},{"name":"receiver"}],"output":{"name":"future"}}],[11,"spawn","","Create a future from a unique closure.",288,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",289,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",289,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",289,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determine whether the lock is poisoned.",289,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"drop","","",289,null],[11,"fmt","","",289,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",290,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",290,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",290,null],[11,"deref","","",291,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",291,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",291,null],[11,"call_once","std::sync::once","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",292,null],[11,"borrow","std::sync::poison","",293,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",293,null],[11,"get","","",293,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",294,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",294,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",294,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Create a `PoisonError`.",294,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_guard","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",294,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",294,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",294,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",294,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from_error","","",295,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",295,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",295,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",295,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",296,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",296,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempt to acquire this lock with shared read access.",296,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",296,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",296,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determine whether the lock is poisoned.",296,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"drop","","",296,null],[11,"fmt","","",296,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",297,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempt to acquire this lock with shared read access.",297,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",297,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",297,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocate all resources associated with this static lock.",297,null],[11,"deref","","",298,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",299,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",299,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",298,null],[11,"drop","","",299,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",300,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",300,null],[11,"release","","Release a resource from this semaphore.",300,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",300,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",301,null],[11,"drop","std::sync::task_pool","",302,null],[11,"new","","Spawns a new thread pool with `threads` threads.",303,{"inputs":[{"name":"taskpool"},{"name":"usize"}],"output":{"name":"taskpool"}}],[11,"execute","","Executes the function `job` on a thread in the pool.",303,null],[11,"new","core::atomic","Creates a new `AtomicBool`.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",304,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",304,null],[11,"swap","","Stores a value into the bool, returning the old value.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",304,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",305,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",305,null],[11,"swap","","Stores a value into the isize, returning the old value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",305,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",306,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",306,null],[11,"swap","","Stores a value into the usize, returning the old value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",306,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",307,null],[11,"load","","Loads a value from the pointer.",307,null],[11,"store","","Stores a value into the pointer.",307,null],[11,"swap","","Stores a value into the pointer, returning the old value.",307,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",307,null],[11,"new","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"}],"output":{"name":"atomicint"}}],[11,"load","","",308,{"inputs":[{"name":"atomicint"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","",308,null],[11,"swap","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","",308,{"inputs":[{"name":"atomicint"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"}],"output":{"name":"atomicuint"}}],[11,"load","","",309,{"inputs":[{"name":"atomicuint"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","",309,null],[11,"swap","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","",309,{"inputs":[{"name":"atomicuint"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","std::time::duration","",310,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",310,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",310,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",310,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",310,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",310,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",310,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",310,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",310,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",310,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",310,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",310,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",310,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",310,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",310,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",310,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",310,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",310,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",310,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",310,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",310,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"boot","std::sys_common::helper_thread","Lazily boots a helper thread, becoming a no-op if the helper has already\nbeen spawned.",311,null],[11,"send","","Sends a message to a spawned worker thread.",311,null],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",312,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signal one waiter on this condition variable to wake up.",312,null],[11,"notify_all","","Awaken all current waiters on this condition variable.",312,null],[11,"wait","","Wait for a signal on the specified mutex.",312,null],[11,"wait_timeout","","Wait for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",312,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocate all resources associated with this condition variable.",312,null],[11,"lock","std::sys_common::mutex","Lock the mutex blocking the current thread until it is available.",313,null],[11,"try_lock","","Attempt to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",313,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlock the mutex.",313,null],[11,"destroy","","Deallocate all resources associated with this mutex.",313,null],[11,"fmt","std::sys_common::net","",314,{"inputs":[{"name":"socketstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",315,null],[11,"connect","","",316,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"option"}],"output":{"name":"result"}}],[11,"new","","",316,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"fd","","",316,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"set_nodelay","","",316,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",316,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read","","",316,null],[11,"write","","",316,null],[11,"peer_name","","",316,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"close_write","","",316,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"close_read","","",316,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_timeout","","",316,null],[11,"set_read_timeout","","",316,null],[11,"set_write_timeout","","",316,null],[11,"socket_name","","",316,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"clone","","",316,{"inputs":[{"name":"tcpstream"}],"output":{"name":"tcpstream"}}],[11,"bind","","",317,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"fd","","",317,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"set_broadcast","","",317,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",317,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_membership","","",317,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"socket_name","","",317,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",317,null],[11,"send_to","","",317,null],[11,"join_multicast","","",317,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",317,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"multicast_time_to_live","","",317,{"inputs":[{"name":"udpsocket"},{"name":"isize"}],"output":{"name":"result"}}],[11,"time_to_live","","",317,{"inputs":[{"name":"udpsocket"},{"name":"isize"}],"output":{"name":"result"}}],[11,"set_timeout","","",317,null],[11,"set_read_timeout","","",317,null],[11,"set_write_timeout","","",317,null],[11,"clone","","",317,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"next","std::sys_common::net2","",318,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",318,null],[11,"connect","","",319,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",319,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_nodelay","","",319,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",319,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read","","",319,null],[11,"write","","",319,null],[11,"peer_addr","","",319,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",319,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",319,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",319,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"bind","","",320,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",320,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",320,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",320,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",320,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"bind","","",321,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",321,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",321,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",321,null],[11,"send_to","","",321,null],[11,"set_broadcast","","",321,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",321,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",321,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",321,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"multicast_time_to_live","","",321,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"time_to_live","","",321,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"duplicate","","",321,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"read","std::sys_common::rwlock","Acquire shared access to the underlying lock, blocking the current\nthread to do so.",322,null],[11,"try_read","","Attempt to acquire shared access to this lock, returning whether it\nsucceeded or not.",322,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquire write access to the underlying lock, blocking the current thread\nto do so.",322,null],[11,"try_write","","Attempt to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",322,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlock previously acquired shared access to this lock.",322,null],[11,"write_unlock","","Unlock previously acquired exclusive access to this lock.",322,null],[11,"destroy","","Destroy OS-related resources with this RWLock.",322,null],[11,"get","std::sys_common::thread_local","Gets the value associated with this TLS key",323,null],[11,"set","","Sets this TLS key to a new value.",323,null],[11,"destroy","","Deallocates this OS TLS key.",323,null],[11,"new","","Create a new managed OS TLS key.",324,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",324,null],[11,"set","","See StaticKey::set",324,null],[11,"drop","","",324,null],[11,"clone","std::sys_common::wtf8","",325,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",325,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",325,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely create a new `CodePoint` without checking the value.",325,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Create a new `CodePoint` if the value is a valid code point.",325,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Create a new `CodePoint` from a `char`.",325,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Return the numeric value of the code point.",325,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally return a Unicode scalar value for the code point.",325,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Return a Unicode scalar value for the code point.",325,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"deref","","",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an new, empty WTF-8 string.",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Create an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",326,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Create a WTF-8 string from an UTF-8 `String`.",326,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Create a WTF-8 string from an UTF-8 `&str` slice.",326,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Create a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",326,null],[11,"as_slice","","",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",326,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append an UTF-8 slice at the end of the string.",326,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",326,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",326,null],[11,"push","","Append a code point at the end of the string.",326,null],[11,"truncate","","Shortens a string to the specified length.",326,null],[11,"into_string","","Consume the WTF-8 string and try to convert it to UTF-8.",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consume the WTF-8 string and convert it lossily to UTF-8.",326,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",326,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",326,null],[11,"eq","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",327,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Create a WTF-8 slice from a UTF-8 `&str` slice.",327,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Return the length, in WTF-8 bytes.",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Return the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",327,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_point_at","","Return the code point at `position`.",327,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"codepoint"}}],[11,"code_point_range_at","","Return the code point at `position`\nand the position of the next code point.",327,null],[11,"code_points","","Return an iterator for the string’s code points.",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Try to convert the string to UTF-8 and return a `&str` slice.",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily convert the string to UTF-8.\nReturn an UTF-8 `&str` slice if the contents are well-formed in UTF-8.",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Convert the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"index","","",327,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",327,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",327,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",327,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",328,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",328,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",328,null],[11,"clone","","",329,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",329,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"hash","","",325,null],[11,"hash","","",326,null],[11,"hash","","",327,null],[11,"is_ascii","","",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",327,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",327,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",327,null],[11,"make_ascii_lowercase","","",327,null],[11,"new","std::sys::condvar","",330,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",330,null],[11,"notify_all","","",330,null],[11,"wait","","",330,null],[11,"wait_timeout","","",330,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",330,null],[11,"new","std::sys::fd","",331,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",331,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extract the actual filedescriptor without closing it.",331,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",331,null],[11,"write","","",331,null],[11,"drop","","",331,null],[11,"new","std::sys::fs","",332,{"inputs":[{"name":"filedesc"},{"name":"i32"},{"name":"bool"}],"output":{"name":"filedesc"}}],[11,"read","","",332,null],[11,"write","","",332,null],[11,"fd","","",332,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"seek","","",332,{"inputs":[{"name":"filedesc"},{"name":"i64"},{"name":"seekstyle"}],"output":{"name":"result"}}],[11,"tell","","",332,{"inputs":[{"name":"filedesc"}],"output":{"name":"result"}}],[11,"fsync","","",332,{"inputs":[{"name":"filedesc"}],"output":{"name":"result"}}],[11,"datasync","","",332,{"inputs":[{"name":"filedesc"}],"output":{"name":"result"}}],[11,"truncate","","",332,{"inputs":[{"name":"filedesc"},{"name":"i64"}],"output":{"name":"result"}}],[11,"fstat","","",332,{"inputs":[{"name":"filedesc"}],"output":{"name":"result"}}],[11,"unwrap","","Extract the actual filedescriptor without closing it.",332,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"drop","","",332,null],[11,"clone","std::sys::fs2","",333,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",334,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",334,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",334,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",334,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"is_dir","","",335,{"inputs":[{"name":"fileattr"}],"output":{"name":"bool"}}],[11,"is_file","","",335,{"inputs":[{"name":"fileattr"}],"output":{"name":"bool"}}],[11,"size","","",335,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",335,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"accessed","","",335,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"modified","","",335,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"readonly","","",334,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",334,null],[11,"mode","","",334,{"inputs":[{"name":"filepermissions"}],"output":{"name":"i32"}}],[11,"next","","",336,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",337,null],[11,"path","","",338,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"new","","",333,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",333,null],[11,"write","","",333,null],[11,"append","","",333,null],[11,"truncate","","",333,null],[11,"create","","",333,null],[11,"mode","","",333,null],[11,"open","","",339,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",339,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",339,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",339,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",339,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",339,null],[11,"write","","",339,null],[11,"flush","","",339,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",339,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",339,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","std::sys::mutex","",340,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",340,null],[11,"unlock","","",340,null],[11,"try_lock","","",340,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",340,null],[11,"new","std::sys::net","",341,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",341,null],[11,"duplicate","","",341,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",341,null],[11,"next","std::sys::os","",342,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"fmt","","",343,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",343,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",343,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",344,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"len","","",344,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",345,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"hash","std::sys::os_str","",346,null],[11,"clone","","",346,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",347,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",346,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",346,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",346,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",346,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",346,null],[11,"from_str","","",347,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",347,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",347,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",347,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"drop","std::sys::pipe","",348,null],[11,"connect","","",349,{"inputs":[{"name":"unixstream"},{"name":"cstring"},{"name":"option"}],"output":{"name":"result"}}],[11,"fd","","",349,{"inputs":[{"name":"unixstream"}],"output":{"name":"i32"}}],[11,"read","","",349,null],[11,"write","","",349,null],[11,"close_write","","",349,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"close_read","","",349,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"set_timeout","","",349,null],[11,"set_read_timeout","","",349,null],[11,"set_write_timeout","","",349,null],[11,"clone","","",349,{"inputs":[{"name":"unixstream"}],"output":{"name":"unixstream"}}],[11,"bind","","",350,{"inputs":[{"name":"unixlistener"},{"name":"cstring"}],"output":{"name":"result"}}],[11,"fd","","",350,{"inputs":[{"name":"unixlistener"}],"output":{"name":"i32"}}],[11,"listen","","",350,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"fd","","",351,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"i32"}}],[11,"accept","","",351,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"result"}}],[11,"set_timeout","","",351,null],[11,"close_accept","","",351,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"result"}}],[11,"clone","","",351,{"inputs":[{"name":"unixacceptor"}],"output":{"name":"unixacceptor"}}],[11,"drop","","",350,null],[11,"from_fd","std::sys::pipe2","",352,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",352,null],[11,"write","","",352,null],[11,"raw","","",352,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"id","std::sys::process","",353,{"inputs":[{"name":"process"}],"output":{"name":"i32"}}],[11,"kill","","",353,{"inputs":[{"name":"process"},{"name":"isize"}],"output":{"name":"result"}}],[11,"killpid","","",353,{"inputs":[{"name":"process"},{"name":"i32"},{"name":"isize"}],"output":{"name":"result"}}],[11,"spawn","","",353,{"inputs":[{"name":"process"},{"name":"c"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"wait","","",353,{"inputs":[{"name":"process"},{"name":"u64"}],"output":{"name":"result"}}],[11,"try_wait","","",353,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"clone","std::sys::process2","",354,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",354,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",354,null],[11,"args","","",354,null],[11,"env","","",354,null],[11,"env_remove","","",354,null],[11,"env_clear","","",354,null],[11,"cwd","","",354,null],[11,"fmt","","",355,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",355,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",355,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",355,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",355,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",355,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",355,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",356,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",356,{"inputs":[{"name":"process"},{"name":"command"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"wait","","",356,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",356,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"read","std::sys::rwlock","",357,null],[11,"try_read","","",357,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",357,null],[11,"try_write","","",357,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",357,null],[11,"write_unlock","","",357,null],[11,"destroy","","",357,null],[11,"new","std::sys::stack_overflow","",358,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",358,null],[11,"bind","std::sys::tcp","",359,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"fd","","",359,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"listen","","",359,{"inputs":[{"name":"tcplistener"},{"name":"isize"}],"output":{"name":"result"}}],[11,"socket_name","","",359,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fd","","",360,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"i32"}}],[11,"accept","","",360,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"result"}}],[11,"set_timeout","","",360,null],[11,"close_accept","","",360,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"result"}}],[11,"clone","","",360,{"inputs":[{"name":"tcpacceptor"}],"output":{"name":"tcpacceptor"}}],[11,"now","std::sys::time::inner","",361,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"ns","","",361,{"inputs":[{"name":"steadytime"}],"output":{"name":"u64"}}],[11,"new","std::sys::timer","",362,{"inputs":[{"name":"timer"}],"output":{"name":"result"}}],[11,"sleep","","",362,null],[11,"oneshot","","",362,null],[11,"period","","",362,null],[11,"drop","","",362,null],[11,"new","std::sys::tty","",363,{"inputs":[{"name":"tty"},{"name":"i32"}],"output":{"name":"result"}}],[11,"read","","",363,null],[11,"write","","",363,null],[11,"set_raw","","",363,{"inputs":[{"name":"tty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_winsize","","",363,{"inputs":[{"name":"tty"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",364,{"inputs":[{"name":"stdin"}],"output":{"name":"stdin"}}],[11,"read","","",364,null],[11,"new","","",365,{"inputs":[{"name":"stdout"}],"output":{"name":"stdout"}}],[11,"write","","",365,null],[11,"new","","",366,{"inputs":[{"name":"stderr"}],"output":{"name":"stderr"}}],[11,"write","","",366,null],[11,"write","","",366,null],[11,"flush","","",366,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","collections::slice","",367,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",367,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",12,null],[11,"borrow_mut","","",12,null],[11,"clone","collections::slice","",368,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",369,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[11,"next","","",367,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next","","",370,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"cmp","core::marker","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"option"}}],[11,"lt","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"le","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"gt","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ge","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"eq","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ne","","",371,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"clone","","",371,{"inputs":[{"name":"nocopy"}],"output":{"name":"nocopy"}}],[11,"cmp","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"option"}}],[11,"lt","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"bool"}}],[11,"le","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"bool"}}],[11,"gt","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"bool"}}],[11,"ge","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"bool"}}],[11,"eq","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"bool"}}],[11,"ne","","",372,{"inputs":[{"name":"managed"},{"name":"managed"}],"output":{"name":"bool"}}],[11,"clone","","",372,{"inputs":[{"name":"managed"}],"output":{"name":"managed"}}],[11,"hash","","",373,null],[11,"eq","","",373,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",373,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",373,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",373,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::fmt::rt::v1","",374,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",374,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"new","core::ptr","Create a new `Unique`.",375,null],[11,"get","","Dereference the content.",375,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereference the content.",375,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",375,null],[11,"hash","core::result","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",165,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",165,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",165,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",165,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",165,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",165,null],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",165,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",165,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",165,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",165,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",165,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",165,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",165,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",165,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",165,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",165,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",165,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",165,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",165,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",165,null],[11,"next","","",376,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",376,null],[11,"next_back","","",376,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",376,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",377,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",377,null],[11,"next_back","","",377,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",378,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",378,null],[11,"next_back","","",378,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",165,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","collections::str","",379,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",380,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",380,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",380,null],[11,"clone","","",381,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",382,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",382,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",383,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",383,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"borrow","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"is","mio","Returns true if the boxed type is the same as `T`",384,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",384,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",384,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",384,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",384,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",384,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",385,null],[11,"fmt","","",385,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",385,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",385,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",385,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",385,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",386,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",386,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",386,null],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",386,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",386,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",386,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",386,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",387,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",387,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",387,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",387,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",388,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",388,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",388,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",388,{"inputs":[{"name":"refcell"}],"output":{"name":"option"}}],[11,"borrow","","Immutably borrows the wrapped value.",388,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",388,{"inputs":[{"name":"refcell"}],"output":{"name":"option"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",388,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",388,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",388,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",388,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",388,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",389,null],[11,"clone","","",389,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",390,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"drop","","",391,null],[11,"deref","","",392,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",392,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",393,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",393,null],[11,"into_inner","","Unwraps the value",393,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",394,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",394,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",394,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",394,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",394,null],[11,"clone","","Makes a clone of the `Rc<T>`.",394,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",394,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",394,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",394,null],[11,"fmt","","",394,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",394,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",395,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",395,null],[11,"clone","","Makes a clone of the `Weak<T>`.",395,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",395,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","core::finally","",396,null],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",117,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",117,null],[11,"default","","",117,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",117,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",117,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",117,null],[11,"eq","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",117,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",117,null],[11,"downcast","","",117,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","",117,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",117,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",117,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",117,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"from_error","","",117,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"hash","core::option","",397,null],[11,"fmt","","",397,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",397,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",397,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",397,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",397,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",397,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",397,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",397,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if the content of the `Option<T>` is a `Some(v)`.",397,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",397,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",397,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",397,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value or returns a default.",397,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value or computes a default.",397,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",397,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",397,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",397,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",397,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",397,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",397,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",397,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",397,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",397,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",397,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",397,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",397,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",397,null],[11,"default","","",397,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",398,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",398,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"next_back","","",398,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",399,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",399,null],[11,"next_back","","",399,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",399,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",400,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",400,null],[11,"next_back","","",400,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",401,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",401,null],[11,"next_back","","",401,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",397,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",12,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",12,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",12,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",12,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",12,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",12,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",12,null],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",12,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",12,null],[11,"as_mut_slice","","Deprecated: use `&mut s[..]` instead.",12,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",12,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"set_len","","Sets the length of a vector.",12,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",12,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",12,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",12,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",12,null],[11,"push","","Appends an element to the back of a collection.",12,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",12,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",12,null],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",12,{"inputs":[{"name":"vec"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",12,null],[11,"len","","Returns the number of elements in the vector.",12,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",12,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",12,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",12,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",12,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",12,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",12,null],[11,"clone","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",12,null],[11,"hash","","",12,null],[11,"index","","",12,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",12,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index_mut","","",12,null],[11,"index_mut","","",12,null],[11,"index_mut","","",12,null],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","collections::borrow","",402,null],[11,"ne","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"eq","","",402,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",402,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",12,{"inputs":[{"name":"vec"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"as_slice","","Deprecated: use `&mut s[..]` instead.",12,null],[11,"add","","",12,null],[11,"drop","","",12,null],[11,"default","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",12,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"into","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",12,null],[11,"from","","",12,null],[11,"from","","",12,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",402,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",12,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",403,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[11,"next","","",403,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"next_back","","",403,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",403,null],[11,"next","","",404,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",404,null],[11,"next_back","","",404,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",404,null],[11,"deref","","",405,{"inputs":[{"name":"derefvec"}],"output":{"name":"vec"}}],[11,"drop","","",405,null],[11,"drop","","",406,null],[11,"drop","","",407,null],[11,"next","unicode::char","",408,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",409,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"borrow","alloc::rc","",394,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",410,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",402,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",402,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",402,null],[11,"into_owned","","Extract the owned data.",402,null],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",402,{"inputs":[{"name":"cow"}],"output":{"name":"bool"}}],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",402,{"inputs":[{"name":"cow"}],"output":{"name":"bool"}}],[11,"deref","","",402,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",402,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",402,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",402,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",402,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",402,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",402,null],[11,"into_cow","","",402,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",402,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"eq","core::ops","",411,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",411,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",411,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",411,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",412,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",412,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",412,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",412,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",413,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",413,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",413,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",413,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",414,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",414,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",414,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",414,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","collections::string","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",415,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",416,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",11,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",11,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",11,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",11,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",11,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",11,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",11,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",11,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",11,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"push_str","","Pushes the given string onto this string buffer.",11,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",11,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",11,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",11,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",11,null],[11,"push","","Adds the given character to the end of the string.",11,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",11,null],[11,"truncate","","Shortens a string to the specified length.",11,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",11,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",11,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",11,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",11,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Return the number of bytes in this string.",11,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",11,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",11,null],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",415,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",415,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",415,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",415,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"fmt","","",416,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",416,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"from_iter","","",11,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",11,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",11,null],[11,"extend","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",402,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",402,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",11,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",402,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",402,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_slice","collections::string","",11,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"default","","",11,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",11,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"add","","",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",11,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",11,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",417,{"inputs":[{"name":"derefstring"}],"output":{"name":"string"}}],[11,"from_str","","",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from","","",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"into","","",11,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",11,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"as_slice","collections::borrow","",402,{"inputs":[{"name":"cow"}],"output":{"name":"str"}}],[11,"write_str","collections::string","",11,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","core::iter","",418,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",418,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",418,null],[11,"next_back","","",418,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"indexable","","",418,{"inputs":[{"name":"rev"}],"output":{"name":"usize"}}],[11,"idx","","",418,{"inputs":[{"name":"rev"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",419,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",419,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",419,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"clone","","",419,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"minmaxresult"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",419,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[11,"clone","","",420,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",420,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",420,null],[11,"next_back","","",420,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"indexable","","",420,{"inputs":[{"name":"cloned"}],"output":{"name":"usize"}}],[11,"idx","","",420,{"inputs":[{"name":"cloned"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",421,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",421,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"indexable","","",421,{"inputs":[{"name":"cycle"}],"output":{"name":"usize"}}],[11,"idx","","",421,{"inputs":[{"name":"cycle"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",422,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",422,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"next_back","","",422,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"indexable","","",422,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"idx","","",422,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",423,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",423,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",423,null],[11,"next_back","","",423,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"indexable","","",423,{"inputs":[{"name":"zip"}],"output":{"name":"usize"}}],[11,"idx","","",423,{"inputs":[{"name":"zip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",424,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",424,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",424,null],[11,"next_back","","",424,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"indexable","","",424,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"idx","","",424,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",425,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",425,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",425,null],[11,"next_back","","",425,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",426,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",426,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",426,null],[11,"next_back","","",426,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",427,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","",427,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",427,null],[11,"next_back","","",427,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"indexable","","",427,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"idx","","",427,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",428,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",428,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",428,null],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",428,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Check whether peekable iterator is empty or not.",428,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",429,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",429,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",429,null],[11,"clone","","",430,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",430,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",430,null],[11,"clone","","",431,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",431,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",431,null],[11,"indexable","","",431,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"idx","","",431,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",432,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",432,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"size_hint","","",432,null],[11,"indexable","","",432,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"idx","","",432,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",433,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",433,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",433,null],[11,"clone","","",434,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",434,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",434,null],[11,"next_back","","",434,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",435,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",435,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"size_hint","","",435,null],[11,"next_back","","",435,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"indexable","","",435,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"idx","","",435,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",435,null],[11,"clone","","",436,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",436,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",436,null],[11,"next_back","","",436,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"indexable","","",436,{"inputs":[{"name":"inspect"}],"output":{"name":"usize"}}],[11,"idx","","",436,{"inputs":[{"name":"inspect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",437,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",437,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",437,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",437,null],[11,"clone","","",438,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",413,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",412,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",438,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",438,null],[11,"clone","","",439,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",439,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",439,null],[11,"next_back","","",439,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",440,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",440,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",440,null],[11,"next_back","","",440,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",438,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"clone","","",441,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",441,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[11,"next","core::ops","",412,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",412,null],[11,"next_back","","",412,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",413,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",442,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",442,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",442,null],[11,"next_back","","",442,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"indexable","","",442,{"inputs":[{"name":"repeat"}],"output":{"name":"usize"}}],[11,"idx","","",442,{"inputs":[{"name":"repeat"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","core::cmp","",443,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",443,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",443,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",443,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",443,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",443,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",443,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",444,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",444,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"result","","Returns the computed hash.",444,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"write","","",444,null],[11,"finish","","",444,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",444,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",444,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"fmt","core::simd","",445,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",446,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",447,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",448,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",449,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",450,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",451,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",452,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",453,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",454,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","mio","",455,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",455,{"inputs":[{"name":"io"},{"name":"fd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",455,{"inputs":[{"name":"io"}],"output":{"name":"fd"}}],[11,"read_slice","","",455,null],[11,"write_slice","","",455,null],[11,"drop","","",455,{"inputs":[{"name":"io"}],"output":null}],[11,"from_fd","","",456,{"inputs":[{"name":"pipereader"},{"name":"fd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",456,{"inputs":[{"name":"pipereader"}],"output":{"name":"fd"}}],[11,"read_slice","","",456,null],[11,"from_fd","","",457,{"inputs":[{"name":"pipewriter"},{"name":"fd"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",457,{"inputs":[{"name":"pipewriter"}],"output":{"name":"fd"}}],[11,"write_slice","","",457,null],[11,"listen","","",458,{"inputs":[{"name":"nonblock"},{"name":"usize"}],"output":{"name":"result"}}],[11,"connect","","",458,{"inputs":[{"name":"nonblock"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_fd","std::net::tcp","",147,{"inputs":[{"name":"tcpstream"},{"name":"fd"}],"output":{"name":"tcpstream"}}],[11,"from_fd","","",148,{"inputs":[{"name":"tcplistener"},{"name":"fd"}],"output":{"name":"tcplistener"}}],[11,"accept","mio","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"result"}}],[11,"from_fd","std::net::udp","",150,{"inputs":[{"name":"udpsocket"},{"name":"fd"}],"output":{"name":"udpsocket"}}],[11,"into_non_block","","",150,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bind","mio","",458,{"inputs":[{"name":"nonblock"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"send_to","","",458,{"inputs":[{"name":"nonblock"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"recv_from","","",458,{"inputs":[{"name":"nonblock"},{"name":"b"}],"output":{"name":"result"}}],[11,"connect","","",458,{"inputs":[{"name":"nonblock"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","",458,{"inputs":[{"name":"nonblock"},{"name":"usize"}],"output":{"name":"result"}}],[11,"accept","","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"result"}}],[11,"last","nix","",459,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"invalid_argument","","",459,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"errno","","",459,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"from_i64","nix::errno::consts","",460,{"inputs":[{"name":"errno"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",460,{"inputs":[{"name":"errno"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",460,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"ne","","",460,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",460,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",460,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"last","","",460,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"desc","","",460,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"hash","nix::fcntl::consts","",461,null],[11,"cmp","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",461,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",461,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",461,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",461,{"inputs":[{"name":"oflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",461,{"inputs":[{"name":"oflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",461,{"inputs":[{"name":"oflag"},{"name":"i32"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",461,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",461,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",461,null],[11,"remove","","Removes the specified flags in-place.",461,null],[11,"toggle","","Toggles the specified flags in-place.",461,null],[11,"bitor","","Returns the union of the two sets of flags.",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",461,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",461,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"hash","","",462,null],[11,"cmp","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",462,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",462,{"inputs":[{"name":"fdflag"},{"name":"i32"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",462,null],[11,"remove","","Removes the specified flags in-place.",462,null],[11,"toggle","","Toggles the specified flags in-place.",462,null],[11,"bitor","","Returns the union of the two sets of flags.",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",462,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",462,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"hash","nix::mount","",463,null],[11,"cmp","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",463,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",463,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",463,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",463,{"inputs":[{"name":"msflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",463,{"inputs":[{"name":"msflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",463,{"inputs":[{"name":"msflags"},{"name":"u64"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",463,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",463,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",463,null],[11,"remove","","Removes the specified flags in-place.",463,null],[11,"toggle","","Toggles the specified flags in-place.",463,null],[11,"bitor","","Returns the union of the two sets of flags.",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",463,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",463,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"hash","","",464,null],[11,"cmp","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",464,{"inputs":[{"name":"mntflags"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",464,{"inputs":[{"name":"mntflags"},{"name":"i32"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",464,null],[11,"remove","","Removes the specified flags in-place.",464,null],[11,"toggle","","Toggles the specified flags in-place.",464,null],[11,"bitor","","Returns the union of the two sets of flags.",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",464,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",464,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"new","nix::sched","",465,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"set","","",465,null],[11,"unset","","",465,null],[11,"hash","nix::sys::epoll","",466,null],[11,"cmp","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",466,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",466,{"inputs":[{"name":"epolleventkind"},{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",466,null],[11,"remove","","Removes the specified flags in-place.",466,null],[11,"toggle","","Toggles the specified flags in-place.",466,null],[11,"bitor","","Returns the union of the two sets of flags.",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",466,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",466,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"fmt","","",466,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","nix::sys::eventfd","",467,null],[11,"cmp","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"option"}}],[11,"lt","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"le","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"gt","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"ge","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"clone","","",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"eq","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"ne","","",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"all","","Returns the set containing all flags.",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",467,{"inputs":[{"name":"eventfdflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",467,{"inputs":[{"name":"eventfdflag"},{"name":"i32"}],"output":{"name":"eventfdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",467,null],[11,"remove","","Removes the specified flags in-place.",467,null],[11,"toggle","","Toggles the specified flags in-place.",467,null],[11,"bitor","","Returns the union of the two sets of flags.",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",467,{"inputs":[{"name":"eventfdflag"},{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"not","","Returns the complement of this set of flags.",467,{"inputs":[{"name":"eventfdflag"}],"output":{"name":"eventfdflag"}}],[11,"fmt","nix::sys::ioctl::ffi","",468,{"inputs":[{"name":"winsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","nix::sys::signal::signal","",469,null],[11,"cmp","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",469,{"inputs":[{"name":"sockflag"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",469,{"inputs":[{"name":"sockflag"},{"name":"u64"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",469,null],[11,"remove","","Removes the specified flags in-place.",469,null],[11,"toggle","","Toggles the specified flags in-place.",469,null],[11,"bitor","","Returns the union of the two sets of flags.",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",469,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",469,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"empty","nix::sys::signal","",470,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"add","","",470,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"remove","","",470,{"inputs":[{"name":"sigset"},{"name":"i32"}],"output":{"name":"result"}}],[11,"new","","",471,null],[11,"from_i64","nix::sys::socket::addr","",472,{"inputs":[{"name":"addressfamily"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",472,{"inputs":[{"name":"addressfamily"},{"name":"u64"}],"output":{"name":"option"}}],[11,"hash","","",472,null],[11,"fmt","","",472,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",472,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"ne","","",472,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",472,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",473,{"inputs":[{"name":"inetaddr"},{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",473,{"inputs":[{"name":"inetaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",473,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",473,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",473,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",473,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",473,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",473,null],[11,"clone","","",473,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",473,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",474,{"inputs":[{"name":"ipaddr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",474,{"inputs":[{"name":"ipaddr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",474,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",475,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",475,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",475,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"octets","","",475,null],[11,"to_std","","",475,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",475,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",475,null],[11,"clone","","",475,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",475,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",476,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",476,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",476,null],[11,"to_std","","",476,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",476,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",477,{"inputs":[{"name":"unixaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"path","","",477,{"inputs":[{"name":"unixaddr"}],"output":{"name":"path"}}],[11,"eq","","",477,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",477,null],[11,"clone","","",477,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",477,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",478,{"inputs":[{"name":"sockaddr"},{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",478,{"inputs":[{"name":"sockaddr"},{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",478,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",478,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",478,null],[11,"eq","","",478,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",478,null],[11,"clone","","",478,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",478,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","nix::sys::socket::multicast","",479,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",479,{"inputs":[{"name":"ip_mreq"},{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"fmt","nix::sys::socket::sockopt","",480,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",480,{"inputs":[{"name":"reuseaddr"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",480,{"inputs":[{"name":"reuseaddr"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",481,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",481,{"inputs":[{"name":"reuseport"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",481,{"inputs":[{"name":"reuseport"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",482,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",482,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",482,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",483,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",483,{"inputs":[{"name":"linger"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",483,{"inputs":[{"name":"linger"},{"name":"i32"},{"name":"i32"},{"name":"linger"}],"output":{"name":"result"}}],[11,"fmt","","",484,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",484,{"inputs":[{"name":"ipaddmembership"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",484,{"inputs":[{"name":"ipaddmembership"},{"name":"i32"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",485,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",485,{"inputs":[{"name":"ipdropmembership"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",485,{"inputs":[{"name":"ipdropmembership"},{"name":"i32"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",486,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",486,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",486,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"},{"name":"i32"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",487,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",487,{"inputs":[{"name":"receivetimeout"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",487,{"inputs":[{"name":"receivetimeout"},{"name":"i32"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"fmt","","",488,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",488,{"inputs":[{"name":"sendtimeout"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",488,{"inputs":[{"name":"sendtimeout"},{"name":"i32"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"fmt","","",489,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",489,{"inputs":[{"name":"broadcast"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",489,{"inputs":[{"name":"broadcast"},{"name":"i32"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"blank","","",490,{"inputs":[{"name":"getstruct"}],"output":{"name":"getstruct"}}],[11,"ffi_ptr","","",490,null],[11,"ffi_len","","",490,null],[11,"unwrap","","",490,{"inputs":[{"name":"getstruct"}],"output":{"name":"t"}}],[11,"new","","",491,{"inputs":[{"name":"setstruct"},{"name":"t"}],"output":{"name":"setstruct"}}],[11,"ffi_ptr","","",491,null],[11,"ffi_len","","",491,{"inputs":[{"name":"setstruct"}],"output":{"name":"u32"}}],[11,"blank","","",492,{"inputs":[{"name":"getbool"}],"output":{"name":"getbool"}}],[11,"ffi_ptr","","",492,null],[11,"ffi_len","","",492,null],[11,"unwrap","","",492,{"inputs":[{"name":"getbool"}],"output":{"name":"bool"}}],[11,"new","","",493,{"inputs":[{"name":"setbool"},{"name":"bool"}],"output":{"name":"setbool"}}],[11,"ffi_ptr","","",493,null],[11,"ffi_len","","",493,{"inputs":[{"name":"setbool"}],"output":{"name":"u32"}}],[11,"blank","","",494,{"inputs":[{"name":"getu8"}],"output":{"name":"getu8"}}],[11,"ffi_ptr","","",494,null],[11,"ffi_len","","",494,null],[11,"unwrap","","",494,{"inputs":[{"name":"getu8"}],"output":{"name":"u8"}}],[11,"new","","",495,{"inputs":[{"name":"setu8"},{"name":"u8"}],"output":{"name":"setu8"}}],[11,"ffi_ptr","","",495,null],[11,"ffi_len","","",495,{"inputs":[{"name":"setu8"}],"output":{"name":"u32"}}],[11,"from_i64","nix::sys::socket","",496,{"inputs":[{"name":"socktype"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",496,{"inputs":[{"name":"socktype"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",496,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",496,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"ne","","",496,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"hash","","",497,null],[11,"cmp","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",497,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",497,{"inputs":[{"name":"sockflag"},{"name":"i32"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",497,null],[11,"remove","","Removes the specified flags in-place.",497,null],[11,"toggle","","Toggles the specified flags in-place.",497,null],[11,"bitor","","Returns the union of the two sets of flags.",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",497,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",497,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"fmt","","",498,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","nix::sys::stat","",499,null],[11,"cmp","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",499,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",499,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",499,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",499,{"inputs":[{"name":"sflag"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",499,{"inputs":[{"name":"sflag"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",499,{"inputs":[{"name":"sflag"},{"name":"u32"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",499,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",499,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",499,null],[11,"remove","","Removes the specified flags in-place.",499,null],[11,"toggle","","Toggles the specified flags in-place.",499,null],[11,"bitor","","Returns the union of the two sets of flags.",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",499,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",499,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"hash","","",500,null],[11,"cmp","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",500,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",500,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",500,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",500,{"inputs":[{"name":"mode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",500,{"inputs":[{"name":"mode"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",500,{"inputs":[{"name":"mode"},{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",500,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",500,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",500,null],[11,"remove","","Removes the specified flags in-place.",500,null],[11,"toggle","","Toggles the specified flags in-place.",500,null],[11,"bitor","","Returns the union of the two sets of flags.",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",500,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",500,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"fmt","","",499,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","nix::sys::termios::ffi::consts","",501,null],[11,"cmp","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",501,{"inputs":[{"name":"inputflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",501,{"inputs":[{"name":"inputflags"},{"name":"u32"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",501,null],[11,"remove","","Removes the specified flags in-place.",501,null],[11,"toggle","","Toggles the specified flags in-place.",501,null],[11,"bitor","","Returns the union of the two sets of flags.",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",501,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",501,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"hash","","",502,null],[11,"cmp","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",502,{"inputs":[{"name":"outputflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",502,{"inputs":[{"name":"outputflags"},{"name":"u32"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",502,null],[11,"remove","","Removes the specified flags in-place.",502,null],[11,"toggle","","Toggles the specified flags in-place.",502,null],[11,"bitor","","Returns the union of the two sets of flags.",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",502,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",502,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"hash","","",503,null],[11,"cmp","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",503,{"inputs":[{"name":"controlflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",503,{"inputs":[{"name":"controlflags"},{"name":"u32"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",503,null],[11,"remove","","Removes the specified flags in-place.",503,null],[11,"toggle","","Toggles the specified flags in-place.",503,null],[11,"bitor","","Returns the union of the two sets of flags.",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",503,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",503,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"hash","","",504,null],[11,"cmp","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",504,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",504,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",504,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",504,{"inputs":[{"name":"localflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",504,{"inputs":[{"name":"localflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",504,{"inputs":[{"name":"localflags"},{"name":"u32"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",504,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",504,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",504,null],[11,"remove","","Removes the specified flags in-place.",504,null],[11,"toggle","","Toggles the specified flags in-place.",504,null],[11,"bitor","","Returns the union of the two sets of flags.",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",504,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",504,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sysname","nix::sys::utsname","",505,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",505,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",505,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",505,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",505,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"hash","nix::sys::wait","",506,null],[11,"cmp","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",506,{"inputs":[{"name":"waitpidflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",506,{"inputs":[{"name":"waitpidflag"},{"name":"i32"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",506,null],[11,"remove","","Removes the specified flags in-place.",506,null],[11,"toggle","","Toggles the specified flags in-place.",506,null],[11,"bitor","","Returns the union of the two sets of flags.",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",506,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",506,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"as_slice","nix::sys::uio","",507,null],[11,"from_slice","","",507,null],[11,"from_mut_slice","","",507,null],[11,"fmt","nix::sys::time","",508,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"hours","","",508,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",508,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",508,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",508,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",508,{"inputs":[{"name":"timeval"},{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",508,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",508,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",508,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",508,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",508,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_child","nix::unistd","",509,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",509,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"eq","nix","",459,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",459,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",459,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"with_nix_path","std::path","",105,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"with_nix_path","","",233,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[11,"as_ext_str","std::ffi::os_str","",95,null],[11,"cmp","mio","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"option"}}],[11,"lt","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"bool"}}],[11,"le","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"bool"}}],[11,"gt","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"bool"}}],[11,"ge","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"bool"}}],[11,"hash","","",458,null],[11,"eq","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"bool"}}],[11,"ne","","",458,{"inputs":[{"name":"nonblock"},{"name":"nonblock"}],"output":{"name":"bool"}}],[11,"fmt","","",458,{"inputs":[{"name":"nonblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",458,{"inputs":[{"name":"nonblock"},{"name":"t"}],"output":{"name":"nonblock"}}],[11,"unwrap","","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"t"}}],[11,"deref","","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"t"}}],[11,"deref_mut","","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"t"}}],[11,"read_slice","","",458,null],[11,"write_slice","","",458,null],[11,"as_raw_fd","","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"fd"}}],[11,"from_fd","","",458,{"inputs":[{"name":"nonblock"},{"name":"fd"}],"output":{"name":"nonblock"}}],[11,"fmt","","",3,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",510,{"inputs":[{"name":"poll"}],"output":{"name":"result"}}],[11,"register","","",510,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"interest"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",510,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"interest"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",510,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",510,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"result"}}],[11,"event","","",510,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"iter","","",510,{"inputs":[{"name":"poll"}],"output":{"name":"eventsiterator"}}],[11,"fmt","","",510,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",511,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",512,null],[11,"eq","","",512,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",512,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",512,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",512,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"as_usize","","",512,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[3,"TcpStream","mio::tcp","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"TcpSocket","","",null,null],[5,"v4","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"v6","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"listen","","",null,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[5,"connect","","",null,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"fmt","","",513,{"inputs":[{"name":"tcpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",513,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",513,{"inputs":[{"name":"tcpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"listen","","",513,{"inputs":[{"name":"tcpsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"getpeername","","",513,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"getsockname","","",513,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"result"}}],[11,"listen","mio","",458,{"inputs":[{"name":"nonblock"},{"name":"usize"}],"output":{"name":"result"}}],[11,"connect","","",458,{"inputs":[{"name":"nonblock"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"as_raw_fd","mio::tcp","",513,{"inputs":[{"name":"tcpsocket"}],"output":{"name":"fd"}}],[11,"from_fd","","",513,{"inputs":[{"name":"tcpsocket"},{"name":"fd"}],"output":{"name":"tcpsocket"}}],[11,"from_fd","","",147,{"inputs":[{"name":"tcpstream"},{"name":"fd"}],"output":{"name":"tcpstream"}}],[11,"from_fd","","",148,{"inputs":[{"name":"tcplistener"},{"name":"fd"}],"output":{"name":"tcplistener"}}],[11,"accept","mio","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"result"}}],[0,"udp","","",null,null],[3,"UdpSocket","mio::udp","A User Datagram Protocol socket.",null,null],[5,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",null,{"inputs":[],"output":{"name":"result"}}],[5,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",null,{"inputs":[],"output":{"name":"result"}}],[5,"bind","","Returns a new, non-blocking, UDP socket bound to the given address",null,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_fd","","",150,{"inputs":[{"name":"udpsocket"},{"name":"fd"}],"output":{"name":"udpsocket"}}],[11,"into_non_block","","",150,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"bind","mio","",458,{"inputs":[{"name":"nonblock"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"send_to","","",458,{"inputs":[{"name":"nonblock"},{"name":"b"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"recv_from","","",458,{"inputs":[{"name":"nonblock"},{"name":"b"}],"output":{"name":"result"}}],[0,"unix","","",null,null],[3,"UnixSocket","mio::unix","",null,null],[3,"UnixListener","","",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixStream","","",null,null],[5,"stream","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"bind","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"connect","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",514,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",514,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","",514,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bind","","",514,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",514,{"inputs":[{"name":"unixsocket"}],"output":{"name":"fd"}}],[11,"from_fd","","",514,{"inputs":[{"name":"unixsocket"},{"name":"fd"}],"output":{"name":"unixsocket"}}],[11,"into_non_block","","",514,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","mio","",458,{"inputs":[{"name":"nonblock"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","",458,{"inputs":[{"name":"nonblock"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","mio::unix","",515,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"listen","","",515,{"inputs":[{"name":"unixlistener"},{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",515,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"incoming","","",515,{"inputs":[{"name":"unixlistener"}],"output":{"name":"incoming"}}],[11,"as_raw_fd","","",515,{"inputs":[{"name":"unixlistener"}],"output":{"name":"fd"}}],[11,"into_non_block","","",515,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from_fd","","",515,{"inputs":[{"name":"unixlistener"},{"name":"fd"}],"output":{"name":"unixlistener"}}],[11,"accept","mio","",458,{"inputs":[{"name":"nonblock"}],"output":{"name":"result"}}],[6,"Item","mio::unix","",null,null],[6,"IntoIter","","",null,null],[11,"fmt","","",516,{"inputs":[{"name":"incoming"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Item","","",null,null],[11,"next","","",516,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"size_hint","","",516,null],[11,"fmt","","",517,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",517,{"inputs":[{"name":"unixstream"},{"name":"p"}],"output":{"name":"result"}}],[11,"read","","",517,null],[11,"write","","",517,null],[11,"flush","","",517,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",517,{"inputs":[{"name":"unixstream"}],"output":{"name":"fd"}}],[11,"from_fd","","",517,{"inputs":[{"name":"unixstream"},{"name":"fd"}],"output":{"name":"unixstream"}}],[11,"into_non_block","","",517,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[0,"buf","","",null,null],[8,"Buf","mio::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",0,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",0,null],[10,"advance","","Advance the internal cursor of the Buf",0,null],[10,"has_remaining","","Returns true if there are any more bytes to consume",0,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[10,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.",0,null],[10,"read_byte","","Read a single byte from the `Buf`",0,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the Buf",1,null],[10,"has_remaining","","Returns true if there are any more bytes to consume",1,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current Buf position and of\nlength between 0 and `Buf::remaining()`.",1,null],[10,"write_slice","","Read bytes from this Buf into the given slice and advance the cursor by\nthe number of bytes read.",1,null],[10,"write_byte","","Write a single byte to the `MuBuf`",1,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_slice","bytes::byte_buf","Create a new `ByteBuf` by copying the contents of the given slice.",518,null],[11,"mut_with_capacity","","",518,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",518,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",518,{"inputs":[{"name":"bytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",518,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",518,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",518,null],[11,"to_seq_byte_str","","",518,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",518,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"new","bytes::alloc","",519,null],[11,"none","","",519,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"is_none","","",519,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",519,null],[11,"bytes","","",519,null],[11,"bytes_mut","","",519,null],[11,"clone","","",519,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",519,null],[11,"allocate","","",520,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",520,null],[11,"allocate","","",520,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",520,null],[11,"remaining","bytes::byte_buf","",518,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",518,null],[11,"advance","","",518,null],[11,"read_slice","","",518,null],[11,"from_mem_ref","","",521,{"inputs":[{"name":"robytebuf"},{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",521,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",521,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"remaining","","",521,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",521,null],[11,"advance","","",521,null],[11,"read_slice","","",521,null],[11,"capacity","","",522,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",522,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",522,null],[11,"write_slice","","",522,null],[11,"remaining","","",522,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",522,null],[11,"mut_bytes","","",522,null],[11,"from_slice","bytes::byte_str","Create a new `SeqByteStr` from a byte slice.",523,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",523,{"inputs":[{"name":"seqbytestr"},{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[6,"Buf","mio::buf","",null,null],[11,"buf","bytes::byte_str","",523,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",523,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",523,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",523,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",523,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[6,"Output","mio::buf","",null,null],[11,"index","bytes::byte_str","",523,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",523,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",524,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",524,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",524,null],[11,"as_slice","","",524,null],[6,"Buf","mio::buf","",null,null],[11,"buf","bytes::byte_str","",524,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",524,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",524,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",524,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",524,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[6,"Output","mio::buf","",null,null],[11,"index","bytes::byte_str","",524,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",525,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",525,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",525,null],[11,"advance","","",525,null],[11,"from_slice","bytes::bytes","",526,null],[11,"of","","",526,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",526,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",526,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",526,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[6,"Buf","mio::buf","",null,null],[11,"buf","bytes::bytes","",526,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",526,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",526,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",526,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",526,null],[11,"to_bytes","","",526,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[6,"Output","mio::buf","",null,null],[11,"index","bytes::bytes","",526,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",526,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",526,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",526,null],[11,"new","bytes::ring","",527,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"clone","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",527,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",527,null],[11,"remaining","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",527,null],[11,"advance","","",527,null],[11,"remaining","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",527,null],[11,"mut_bytes","","",527,null],[11,"read","","",527,null],[11,"write","","",527,null],[11,"flush","","",527,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"from_slice","bytes::rope","",528,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",528,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",528,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",528,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[6,"Buf","mio::buf","",null,null],[11,"buf","bytes::rope","",528,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",528,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",528,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",528,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",528,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[6,"Output","mio::buf","",null,null],[11,"index","bytes::rope","",528,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",528,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[6,"Error","mio::buf","",null,null],[11,"remaining","bytes::rope","",529,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",529,null],[11,"advance","","",529,null],[6,"Item","mio::buf","",null,null],[11,"next","bytes::rope","",530,{"inputs":[{"name":"pieceiter"}],"output":{"name":"option"}}],[11,"wrap","bytes::slice","",531,null],[11,"remaining","","",531,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",531,null],[11,"advance","","",531,null],[11,"wrap","","",532,null],[11,"remaining","","",532,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",532,null],[11,"mut_bytes","","",532,null],[6,"Error","mio::buf","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[6,"Error","","",null,null],[11,"remaining","alloc::boxed","",117,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",117,null],[11,"advance","","",117,null],[11,"read_slice","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","bytes::byte_buf","",518,null],[11,"read","","",521,null],[11,"read","bytes::rope","",529,null],[11,"read","alloc::boxed","",117,null],[11,"write","bytes::byte_buf","",522,null],[11,"flush","","",522,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[11,"fmt","bytes","",533,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ByteBuf","mio::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","mio::Handler","",null,null],[16,"Message","","",null,null],[11,"readable","mio","",534,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"readhint"}],"output":null}],[11,"writable","","",534,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"}],"output":null}],[11,"notify","","",534,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","",534,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","",534,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[8,"FromFd","","Create a value with a FD",null,null],[10,"from_fd","","",535,{"inputs":[{"name":"fromfd"},{"name":"fd"}],"output":{"name":"self"}}],[8,"TryRead","","",null,null],[11,"read","","",536,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"read_slice","","",536,null],[8,"TryWrite","","",null,null],[11,"write","","",537,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"write_slice","","",537,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"Socket","","",null,null],[11,"linger","","Returns the value for the `SO_LINGER` socket option.",538,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"set_linger","","Sets the value for the `SO_LINGER` socket option",538,{"inputs":[{"name":"socket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set_reuseaddr","","",538,{"inputs":[{"name":"socket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_reuseport","","",538,{"inputs":[{"name":"socket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_tcp_nodelay","","",538,{"inputs":[{"name":"socket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` socket option to the supplied number of\nmilliseconds.",538,{"inputs":[{"name":"socket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` socket option to the supplied number of\nmilliseconds.",538,{"inputs":[{"name":"socket"},{"name":"usize"}],"output":{"name":"result"}}],[8,"IntoNonBlock","","",null,null],[10,"into_non_block","","",539,{"inputs":[{"name":"intononblock"}],"output":{"name":"result"}}],[11,"readable","","",534,null],[11,"writable","","",534,null],[11,"notify","","",534,null],[11,"timeout","","",534,null],[11,"interrupted","","",534,null],[11,"read","","",536,null],[11,"write","","",537,null],[11,"fmt","mio::tcp","",513,null],[11,"connect","","",513,null],[11,"bind","","",513,null],[11,"listen","","",513,null],[11,"getpeername","","",513,null],[11,"getsockname","","",513,null],[11,"as_raw_fd","","",513,null],[11,"from_fd","","",513,null],[11,"fmt","mio::unix","",514,null],[11,"connect","","",514,null],[11,"listen","","",514,null],[11,"bind","","",514,null],[11,"as_raw_fd","","",514,null],[11,"from_fd","","",514,null],[11,"into_non_block","","",514,null],[11,"fmt","","",515,null],[11,"listen","","",515,null],[11,"accept","","",515,null],[11,"incoming","","",515,null],[11,"as_raw_fd","","",515,null],[11,"into_non_block","","",515,null],[11,"from_fd","","",515,null],[11,"fmt","","",516,null],[11,"next","","",516,null],[11,"size_hint","","",516,null],[11,"fmt","","",517,null],[11,"connect","","",517,null],[11,"read","","",517,null],[11,"write","","",517,null],[11,"flush","","",517,null],[11,"as_raw_fd","","",517,null],[11,"from_fd","","",517,null],[11,"into_non_block","","",517,null],[11,"linger","mio","Returns the value for the `SO_LINGER` socket option.",538,null],[11,"set_linger","","Sets the value for the `SO_LINGER` socket option",538,null],[11,"set_reuseaddr","","",538,null],[11,"set_reuseport","","",538,null],[11,"set_tcp_nodelay","","",538,null],[11,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` socket option to the supplied number of\nmilliseconds.",538,null],[11,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` socket option to the supplied number of\nmilliseconds.",538,null]],"paths":[[8,"Buf"],[8,"MutBuf"],[3,"EventLoopConfig"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"Slab"],[3,"PollOpt"],[3,"Interest"],[3,"ReadHint"],[3,"EventLoop"],[3,"Sender"],[3,"String"],[3,"Vec"],[3,"EscapeDefault"],[3,"Thunk"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"ScopedKey"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"JoinGuard"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[3,"Bucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"Error"],[3,"IoError"],[3,"OsString"],[3,"OsStr"],[3,"Path"],[3,"TempDir"],[3,"OpenOptions"],[3,"Permissions"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"Lazy"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"BufStream"],[3,"Cursor"],[4,"Repr"],[3,"Custom"],[4,"ErrorKind"],[3,"Box"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"BufferedReader"],[3,"BufferedWriter"],[3,"LineBufferedWriter"],[3,"InternalBufferedWriter"],[3,"BufferedStream"],[3,"ChanReader"],[3,"ChanWriter"],[3,"MemWriter"],[3,"MemReader"],[3,"BufWriter"],[3,"BufReader"],[4,"Result"],[3,"TempDir"],[3,"Bytes"],[3,"File"],[3,"Directories"],[4,"SocketType"],[4,"Flag"],[4,"Protocol"],[3,"Hint"],[3,"Info"],[3,"TcpStream"],[3,"TcpListener"],[3,"TcpAcceptor"],[3,"UdpSocket"],[4,"IpAddr"],[3,"SocketAddr"],[3,"ParseError"],[3,"UnixStream"],[3,"UnixListener"],[3,"UnixAcceptor"],[3,"PipeStream"],[3,"EnvKey"],[3,"Command"],[3,"ProcessOutput"],[4,"StdioContainer"],[4,"ProcessExit"],[3,"Process"],[3,"StdinReader"],[3,"StdinReaderGuard"],[3,"StdReader"],[3,"StdWriter"],[3,"Timer"],[3,"TimerCallback"],[3,"LimitReader"],[3,"NullWriter"],[3,"ZeroReader"],[3,"NullReader"],[3,"MultiWriter"],[3,"ChainedReader"],[3,"TeeReader"],[3,"IterReader"],[4,"IoErrorKind"],[3,"RefReader"],[3,"RefWriter"],[3,"Lines"],[3,"Chars"],[3,"IncomingConnections"],[4,"FileMode"],[4,"FileAccess"],[4,"FileType"],[3,"FileStat"],[3,"UnstableFileStat"],[3,"FilePermission"],[3,"ParsePathError"],[3,"Path"],[3,"ParsePathError"],[4,"PathPrefix"],[3,"Display"],[4,"MapError"],[3,"MemoryMap"],[3,"Command"],[3,"ExitStatus"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Output"],[4,"StdioImp"],[3,"Stdio"],[3,"Child"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Range"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"Sentinel"],[3,"TaskPool"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Duration"],[3,"Helper"],[3,"Condvar"],[3,"Mutex"],[4,"SocketStatus"],[3,"Inner"],[3,"TcpStream"],[3,"UdpSocket"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileDesc"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileAttr"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"Mutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"Inner"],[3,"UnixStream"],[3,"UnixListener"],[3,"UnixAcceptor"],[3,"AnonPipe"],[3,"Process"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"TcpListener"],[3,"TcpAcceptor"],[3,"SteadyTime"],[3,"Timer"],[3,"TTY"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[4,"Alignment"],[3,"Unique"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"Rc"],[3,"Weak"],[3,"Finallyalizer"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Cow"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"Arc"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"StepBy"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Ordering"],[3,"SipHasher"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Io"],[3,"PipeReader"],[3,"PipeWriter"],[3,"NonBlock"],[4,"Error"],[4,"Errno"],[3,"OFlag"],[3,"FdFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"CpuSet"],[3,"EpollEventKind"],[3,"EventFdFlag"],[3,"Winsize"],[3,"SockFlag"],[3,"SigSet"],[3,"SigAction"],[4,"AddressFamily"],[4,"InetAddr"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"UnixAddr"],[4,"SockAddr"],[3,"ip_mreq"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"IpMulticastTtl"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"GetStruct"],[3,"SetStruct"],[3,"GetBool"],[3,"SetBool"],[3,"GetU8"],[3,"SetU8"],[4,"SockType"],[3,"SockFlag"],[3,"linger"],[3,"SFlag"],[3,"Mode"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[3,"WaitPidFlag"],[3,"IoVec"],[3,"TimeVal"],[4,"Fork"],[3,"Poll"],[3,"TimerError"],[3,"Token"],[3,"TcpSocket"],[3,"UnixSocket"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixStream"],[3,"ByteBuf"],[3,"MemRef"],[3,"Heap"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[3,"Bytes"],[3,"RingBuf"],[3,"Rope"],[3,"RopeBuf"],[3,"PieceIter"],[3,"SliceBuf"],[3,"MutSliceBuf"],[4,"BufError"],[8,"Handler"],[8,"FromFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Socket"],[8,"IntoNonBlock"]]};
initSearch(searchIndex);
